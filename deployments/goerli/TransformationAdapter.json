{
  "address": "0x505d8ff44d40A8B6bD0A9b84499cBd9A95e6d855",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_pairCodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_conduitController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "returnERC1155",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "returnERC20",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "returnERC721",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "unwrapNative",
          "type": "bool"
        }
      ],
      "name": "swapExactIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "enum TokenSource",
          "name": "tokenSource",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "transferData",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "unwrapNative",
          "type": "bool"
        }
      ],
      "name": "swapExactOut",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "unwrapNative",
          "type": "bool"
        }
      ],
      "name": "swapMaxIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum TokenSource",
          "name": "source",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferERC1155From",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum TokenSource",
          "name": "source",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferERC20From",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum TokenSource",
          "name": "source",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferERC721From",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "unwrapNativeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "wrapNativeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9b82d93d8dcd8761f61ec37c11ca871b3c61720d407daedea9d43920764fd90",
  "receipt": {
    "to": null,
    "from": "0x745E3182275791241eb92036a4A767664c456343",
    "contractAddress": "0x505d8ff44d40A8B6bD0A9b84499cBd9A95e6d855",
    "transactionIndex": 27,
    "gasUsed": "2035010",
    "logsBloom": "0x
    "blockHash": "0x756169fa6daaa6996c8165ad327f426e93e12dc821b3ac44693bd0f0c330ff50",
    "transactionHash": "0xc9b82d93d8dcd8761f61ec37c11ca871b3c61720d407daedea9d43920764fd90",
    "logs": [],
    "blockNumber": 7711845,
    "cumulativeGasUsed": "8391411",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303",
    "0x00000000F9490004C11Cef243f5400493c00Ad63"
  ],
  "numDeployments": 1,
  "solcInputHash": "4cdb95148abdf6f3fe75c6d0b6b1f691",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pairCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_conduitController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"returnERC1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"returnERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"returnERC721\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrapNative\",\"type\":\"bool\"}],\"name\":\"swapExactIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"enum TokenSource\",\"name\":\"tokenSource\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"unwrapNative\",\"type\":\"bool\"}],\"name\":\"swapExactOut\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrapNative\",\"type\":\"bool\"}],\"name\":\"swapMaxIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum TokenSource\",\"name\":\"source\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferERC1155From\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum TokenSource\",\"name\":\"source\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferERC20From\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum TokenSource\",\"name\":\"source\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferERC721From\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"unwrapNativeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrapNativeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"returnERC1155(address,uint256)\":{\"details\":\"Function to return any excess ERC1155 token from      address(this) to `msg.sender`.\",\"params\":{\"token\":\"The token to return to the caller.\",\"tokenId\":\"The token identifier of the asset.\"}},\"returnERC20(address)\":{\"details\":\"Function to return any excess ERC20 tokens from address(this)      to `msg.sender`.\",\"params\":{\"token\":\"The token to return to the caller.\"}},\"returnERC721(address,uint256)\":{\"details\":\"Function to return any left over ERC721 token from      address(this) to `msg.sender`.\",\"params\":{\"token\":\"The token to return to the caller.\",\"tokenId\":\"The token identifier of the asset.\"}},\"swapExactIn(uint256,uint256,address[],address,bool)\":{\"details\":\"This function swaps an exact amount of tokens from address(this)      and sends a mimimum amount of output token to the specified recipient.\",\"params\":{\"amountIn\":\"The exact amount of input token to be spent.\",\"amountOutMin\":\"The minimum amount of output token to be received.\",\"path\":\"The swap path.\",\"to\":\"The recipient of output token.\",\"unwrapNative\":\"Flag to unwrap for native token if output token is WETH.\"}},\"swapExactOut(uint256,uint256,address[],address,uint8,bytes,bool)\":{\"details\":\"This function swaps ERC20 tokens from msg.sender      for an exact amount of output tokens, sent      to the specified recipient.\",\"params\":{\"amountInMax\":\"The maximum amount of input to be spent.\",\"amountOut\":\"The exact amount of output token to receive.\",\"path\":\"The swap path.\",\"to\":\"The recipient to receive output token.\",\"tokenSource\":\"The token / approval source for input token.\",\"transferData\":\"Additional data required depending on `source`.\",\"unwrapNative\":\"Flag to unwrap for native token if output token is WETH.\"}},\"swapMaxIn(uint256,address[],address,bool)\":{\"details\":\"This function performs the swaps as outlined in `path`. This contract's      entire balance of input token will be swapped for a minimum amount of      output token, sent to the specified recipient.\",\"params\":{\"amountOutMin\":\"The minimum amount of output token to be received.\",\"path\":\"The swap path.\",\"to\":\"The recipient of output token.\",\"unwrapNative\":\"Flag to unwrap for native token if output token is WETH.\"}},\"transferERC1155From(address,address,uint256,uint256,uint8,bytes)\":{\"details\":\"Function to transfer an ERC1155 token from `msg.sender`      to a given recipient. Assets will be transferred from      a user's wallet with approvals being sourced from the      Shoyu contract or Seaport Conduit.\",\"params\":{\"amount\":\"The amount of the asset to transfer.\",\"data\":\"Additional encoded data required depending on `source`.\",\"source\":\"The NFT approval source.\",\"to\":\"The recipient of the transfer.\",\"token\":\"The ERC1155 token to transfer.\",\"tokenId\":\"The tokenId of the asset to transfer.\"}},\"transferERC20From(address,address,uint256,uint8,bytes)\":{\"details\":\"Function to transfer ERC20 tokens from `msg.sender`      to a given recipient. Assets can be transferred from      a user's wallet with approvals being sourced from      Shoyu contract or Shoyu's Seaport Conduit.\",\"params\":{\"amount\":\"The amount to transfer.\",\"data\":\"Additional encoded data required depending on `source`.\",\"source\":\"The token / approval source.\",\"to\":\"The recipient of the transfer.\",\"token\":\"The ERC20 token to transfer.\"}},\"transferERC721From(address,address,uint256,uint8,bytes)\":{\"details\":\"Function to transfer an ERC721 token from `msg.sender`      to a given recipient. Assets will be transferred from      a user's wallet with approvals being sourced from the      Shoyu contract or Seaport Conduit.\",\"params\":{\"data\":\"Additional encoded data required depending on `source`.\",\"source\":\"The NFT approval source.\",\"to\":\"The recipient of the transfer.\",\"token\":\"The ERC721 token to transfer.\",\"tokenId\":\"The tokenId of the asset to transfer.\"}},\"unwrapNativeToken(uint256,address)\":{\"details\":\"This function unwraps WETH held by address(this)      and transfers ETH to the specified recipient.\",\"params\":{\"amount\":\"The amount of WETH to be unwrapped.\",\"to\":\"The ETH recipient.\"}},\"wrapNativeToken(uint256)\":{\"details\":\"This function wraps ETH held by address(this).\",\"params\":{\"amount\":\"The amount of ETH to wrap\"}}},\"stateVariables\":{\"WETH\":{\"details\":\"The WETH address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shoyu/adapters/Transform/TransformationAdapter.sol\":\"TransformationAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":19066},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC1155 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             METADATA LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC1155 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        balanceOf[from][id] -= amount;\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        // Storing these outside the loop saves ~15 gas per iteration.\\n        uint256 id;\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < ids.length; ) {\\n            id = ids[i];\\n            amount = amounts[i];\\n\\n            balanceOf[from][id] -= amount;\\n            balanceOf[to][id] += amount;\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        require(owners.length == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        // Unchecked because the only math done is incrementing\\n        // the array index counter which cannot possibly overflow.\\n        unchecked {\\n            for (uint256 i = 0; i < owners.length; ++i) {\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[from][ids[i]] -= amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0ed909c57d26645a267388dcec3ba5b8ce7510afb9ed9561da45b0d386f90ab8\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xb59c7c25eca386f39da4819a9f70f89b73b7583d5f5127a83ffe5339800b1183\",\"license\":\"AGPL-3.0-only\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x680172744962444cd2f8470d50991336b431fe4e29dd835018ac2f36e53344be\",\"license\":\"GPL-3.0\"},\"contracts/shoyu/adapters/Transfer/ConduitAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport { ConduitControllerInterface } from \\\"seaport/contracts/interfaces/ConduitControllerInterface.sol\\\";\\nimport { ConduitInterface } from \\\"seaport/contracts/interfaces/ConduitInterface.sol\\\";\\nimport { ConduitTransfer } from \\\"seaport/contracts/conduit/lib/ConduitStructs.sol\\\";\\nimport { ConduitItemType } from \\\"seaport/contracts/conduit/lib/ConduitEnums.sol\\\";\\n\\ncontract ConduitAdapter {\\n    // Allow for interaction with the conduit controller.\\n    ConduitControllerInterface private immutable _CONDUIT_CONTROLLER;\\n    // Cache the conduit creation hash used by the conduit controller.\\n    bytes32 private immutable _CONDUIT_CREATION_CODE_HASH;\\n\\n    constructor(address _conduitController) {\\n        // Get the conduit creation code hash from the supplied conduit\\n        // controller and set it as an immutable.\\n        ConduitControllerInterface conduitController = ConduitControllerInterface(\\n            _conduitController\\n        );\\n        (_CONDUIT_CREATION_CODE_HASH, ) = conduitController.getConduitCodeHashes();\\n\\n        // Set the supplied conduit controller as an immutable.\\n        _CONDUIT_CONTROLLER = conduitController;\\n    }\\n\\n    /// @dev This function derives the conduit address from the deployer,\\n    ///      conduit key, and creation code hash.\\n    function _getConduit(bytes32 conduitKey) internal view returns (address conduit) {\\n        conduit = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            address(_CONDUIT_CONTROLLER),\\n                            conduitKey,\\n                            _CONDUIT_CREATION_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @dev This function transfers an ERC20 using a Seaport\\n    ///      Conduit to source approval.\\n    /// @notice Only use `msg.sender` or `address(this)` in the from param.\\n    /// @param token        The ERC20 token to transfer.\\n    /// @param from         The originator of the transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param amount       The amount of ERC20 to be sent.\\n    /// @param conduitKey   The key of the conduit to used.\\n    function _transferERC20WithConduit(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes32 conduitKey\\n    ) internal {\\n        address conduit = _getConduit(conduitKey);\\n\\n        ConduitTransfer[] memory conduitTransfers = new ConduitTransfer[](1);\\n        conduitTransfers[0] = ConduitTransfer(\\n            ConduitItemType.ERC20,\\n            token,\\n            from,\\n            to,\\n            0,\\n            amount\\n        );\\n\\n        // Call the conduit and execute transfer.\\n        ConduitInterface(conduit).execute(conduitTransfers);\\n    }\\n\\n    /// @dev This function transfers an ERC721 token using a Seaport\\n    ///      Conduit to source approval.\\n    /// @notice Only use `msg.sender` or `address(this)` in the from param.\\n    /// @param token        The ERC721 token to transfer.\\n    /// @param from         The originator of the transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param tokenId      The tokenId of the ERC721 to be sent.\\n    /// @param conduitKey   The key of the conduit to used.\\n    function _transferERC721WithConduit(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes32 conduitKey\\n    ) internal {\\n        address conduit = _getConduit(conduitKey);\\n\\n        ConduitTransfer[] memory conduitTransfers = new ConduitTransfer[](1);\\n        conduitTransfers[0] = ConduitTransfer(\\n            ConduitItemType.ERC721,\\n            token,\\n            from,\\n            to,\\n            tokenId,\\n            1\\n        );\\n\\n        // Call the conduit and execute transfer.\\n        ConduitInterface(conduit).execute(conduitTransfers);\\n    }\\n\\n    /// @dev This function transfers an ERC1155 token using a Seaport\\n    ///      Conduit to source approval.\\n    /// @notice Only use `msg.sender` or `address(this)` in the from param.\\n    /// @param token        The ERC1155 token to transfer.\\n    /// @param from         The originator of the transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param tokenId      The tokenId of the ERC1155 to be sent.\\n    /// @param amount       The amount of the ERC1155 to be sent.\\n    /// @param conduitKey   The key of the conduit to used.\\n    function _transferERC1155WithConduit(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes32 conduitKey\\n    ) internal {\\n        address conduit = _getConduit(conduitKey);\\n\\n        ConduitTransfer[] memory conduitTransfers = new ConduitTransfer[](1);\\n        conduitTransfers[0] = ConduitTransfer(\\n            ConduitItemType.ERC1155,\\n            token,\\n            from,\\n            to,\\n            tokenId,\\n            amount\\n        );\\n\\n        // Call the conduit and execute transfer.\\n        ConduitInterface(conduit).execute(conduitTransfers);\\n    }\\n}\",\"keccak256\":\"0x02c920eaaada2a15eaca0bb144724a480290992e32897ba97fd491e5e73b33fa\",\"license\":\"MIT\"},\"contracts/shoyu/adapters/Transfer/TransferAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"@rari-capital/solmate/src/tokens/ERC1155.sol\\\";\\nimport \\\"./ConduitAdapter.sol\\\";\\nimport { TokenSource } from \\\"../../lib/LibShoyu.sol\\\";\\n\\ncontract TransferAdapter is ConduitAdapter {\\n    constructor(address _conduitController) ConduitAdapter(_conduitController) {}\\n\\n    /// @dev Function to transfer ERC20 tokens from `msg.sender`\\n    ///      to a given recipient. Assets can be transferred from\\n    ///      a user's wallet with approvals being sourced from\\n    ///      Shoyu contract or Shoyu's Seaport Conduit.\\n    /// @param token        The ERC20 token to transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param amount       The amount to transfer.\\n    /// @param source       The token / approval source.\\n    /// @param data         Additional encoded data required depending on `source`.\\n    function transferERC20From(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        TokenSource source,\\n        bytes memory data\\n    ) public payable {\\n        if (source == TokenSource.WALLET) {\\n            ERC20(token).transferFrom(msg.sender, to, amount);\\n        } else if (source == TokenSource.CONDUIT) {\\n            bytes32 conduitKey = abi.decode(data, (bytes32));\\n\\n            _transferERC20WithConduit(\\n                token,\\n                msg.sender,\\n                to,\\n                amount,\\n                conduitKey\\n            );\\n        }\\n    }\\n\\n    /// @dev Function to transfer an ERC721 token from `msg.sender`\\n    ///      to a given recipient. Assets will be transferred from\\n    ///      a user's wallet with approvals being sourced from the\\n    ///      Shoyu contract or Seaport Conduit.\\n    /// @param token        The ERC721 token to transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param tokenId      The tokenId of the asset to transfer.\\n    /// @param source       The NFT approval source.\\n    /// @param data         Additional encoded data required depending on `source`.\\n    function transferERC721From(\\n        address token,\\n        address to,\\n        uint256 tokenId,\\n        TokenSource source,\\n        bytes memory data\\n    ) public payable {\\n        if (source == TokenSource.WALLET) {\\n            ERC721(token).safeTransferFrom(\\n                msg.sender,\\n                to,\\n                tokenId\\n            );\\n        } else if (source == TokenSource.CONDUIT) {\\n            bytes32 conduitKey = abi.decode(data, (bytes32));\\n\\n            _transferERC721WithConduit(\\n                token,\\n                msg.sender,\\n                to,\\n                tokenId,\\n                conduitKey\\n            );\\n        }\\n    }\\n\\n    /// @dev Function to transfer an ERC1155 token from `msg.sender`\\n    ///      to a given recipient. Assets will be transferred from\\n    ///      a user's wallet with approvals being sourced from the\\n    ///      Shoyu contract or Seaport Conduit.\\n    /// @param token        The ERC1155 token to transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param tokenId      The tokenId of the asset to transfer.\\n    /// @param amount       The amount of the asset to transfer.\\n    /// @param source       The NFT approval source.\\n    /// @param data         Additional encoded data required depending on `source`.\\n    function transferERC1155From(\\n        address token,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        TokenSource source,\\n        bytes memory data\\n    ) public payable {\\n        if (source == TokenSource.WALLET) {\\n            ERC1155(token).safeTransferFrom(\\n                msg.sender,\\n                to,\\n                tokenId,\\n                amount,\\n                \\\"0x\\\"\\n            );\\n        } else if (source == TokenSource.CONDUIT) {\\n           bytes32 conduitKey = abi.decode(data, (bytes32));\\n\\n           _transferERC1155WithConduit(\\n                token,\\n                msg.sender,\\n                to,\\n                tokenId,\\n                amount,\\n                conduitKey\\n            );\\n        }\\n    }\\n\\n    /// @dev Function to return any excess ERC20 tokens from address(this)\\n    ///      to `msg.sender`.\\n    /// @param token        The token to return to the caller.\\n    function returnERC20(address token) external payable {\\n        uint256 balance = ERC20(token).balanceOf(address(this));\\n        if (balance > 0) {\\n            ERC20(token).transfer(msg.sender, balance);\\n        }\\n    }\\n\\n    /// @dev Function to return any left over ERC721 token from\\n    ///      address(this) to `msg.sender`.\\n    /// @param token        The token to return to the caller.\\n    /// @param tokenId      The token identifier of the asset.\\n    function returnERC721(address token, uint256 tokenId) external payable {\\n        if (ERC721(token).ownerOf(tokenId) == address(this)) {\\n            ERC721(token).transferFrom(address(this), msg.sender, tokenId);\\n        }\\n    }\\n\\n    /// @dev Function to return any excess ERC1155 token from\\n    ///      address(this) to `msg.sender`.\\n    /// @param token        The token to return to the caller.\\n    /// @param tokenId      The token identifier of the asset.\\n    function returnERC1155(address token, uint256 tokenId) external payable {\\n        uint256 balance = ERC1155(token).balanceOf(address(this), tokenId);\\n        if (balance > 0) {\\n            ERC1155(token).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                tokenId,\\n                balance,\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n}\",\"keccak256\":\"0x3e098902d83fd4b43dc98e80406ca05cb19df7ecae45b08356f0cd0e93cdc087\",\"license\":\"MIT\"},\"contracts/shoyu/adapters/Transform/LegacySwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../Transfer/ConduitAdapter.sol\\\";\\nimport \\\"../Transfer/TransferAdapter.sol\\\";\\nimport { pairFor, sortTokens, getAmountsIn, getAmountsOut } from \\\"../../lib/LibSushi.sol\\\";\\nimport { TokenSource } from \\\"../../lib/LibShoyu.sol\\\";\\n\\ncontract LegacySwapAdapter is TransferAdapter {\\n    /// @dev The UniswapV2Factory address.\\n    address private immutable factory;\\n    /// @dev The UniswapV2 pair init code.\\n    bytes32 private immutable pairCodeHash;\\n\\n    constructor(\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        address _conduitController\\n    ) TransferAdapter (_conduitController) {\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n    }\\n\\n    /// @dev This function transfers the input token from msg.sender and\\n    ///      performs the swaps outlined in `path`. An exact amount of the\\n    ///      output token is sent to the specified recipient.\\n    /// @param amountOut        The exact amount of output token to receive.\\n    /// @param amountInMax      The maximum amount of input to be spent.\\n    /// @param path             The swap path.\\n    /// @param to               The recipient to receive output token.\\n    /// @param tokenSource      The token / approval source for input token.\\n    /// @param transferData     Additional data required depending on `source`.\\n    function _legacySwapExactOut(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address to,\\n        TokenSource tokenSource,\\n        bytes memory transferData\\n    ) internal returns (uint256 amountIn) {\\n        uint256[] memory amounts = getAmountsIn(\\n            factory,\\n            amountOut,\\n            path,\\n            pairCodeHash\\n        );\\n        amountIn = amounts[0];\\n\\n        require(amountIn <= amountInMax, '_legacySwapExactOut/EXCESSIVE_AMOUNT_IN');\\n\\n        transferERC20From(\\n            path[0],\\n            pairFor(\\n                factory,\\n                path[0],\\n                path[1],\\n                pairCodeHash\\n            ),\\n            amountIn,\\n            tokenSource,\\n            transferData\\n        );\\n\\n        _swap(amounts, path, to);\\n    }\\n\\n    /// @dev This function transfers an exact amount of the input token\\n    ///      from address(this) and performs the swaps outlined in `path`.\\n    ///      The output token is sent to the specified recipient.\\n    /// @param amountIn         The exact amount of input token to be spent.\\n    /// @param amountOutMin     The minimum amount of output token to be received.\\n    /// @param path             The swap path.\\n    /// @param to               The recipient of output token.\\n    function _legacySwapExactIn(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to\\n    ) internal returns (uint256 amountOut) {\\n        uint256[] memory amounts = getAmountsOut(\\n            factory,\\n            amountIn,\\n            path,\\n            pairCodeHash\\n        );\\n        amountOut = amounts[amounts.length - 1];\\n\\n        require(amountOut >= amountOutMin, \\\"_legacySwapExactIn/EXCESSIVE_AMOUNT_OUT\\\");\\n\\n        ERC20(path[0]).transfer(\\n            pairFor(\\n                factory,\\n                path[0],\\n                path[1],\\n                pairCodeHash\\n            ),\\n            amountIn\\n        );\\n\\n        _swap(amounts, path, to);\\n    }\\n\\n    /// @dev Performs swaps as outlined in `path` and sends the output\\n    ///      token to the specified recipient.\\n    /// @notice Requires the initial amount to have already been sent to the\\n    ///         first pair.\\n    /// @param amounts  The amounts to be swapped.\\n    /// @param path     The swap path.\\n    /// @param _to      The recipient of output token.\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n\\n            (address token0, ) = sortTokens(input, output);\\n\\n            uint256 amountOut = amounts[i + 1];\\n\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? pairFor(factory, output, path[i + 2], pairCodeHash) : _to;\\n\\n            IUniswapV2Pair(pairFor(factory, input, output, pairCodeHash)).swap(\\n                amount0Out,\\n                amount1Out,\\n                to,\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    \\n}\",\"keccak256\":\"0x95f16d8d76adfded50d18996d2b6147a077dec2ab344528fd33ce6789f93bf57\",\"license\":\"MIT\"},\"contracts/shoyu/adapters/Transform/TransformationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IWETH.sol\\\";\\nimport \\\"./LegacySwapAdapter.sol\\\";\\n\\ncontract TransformationAdapter is LegacySwapAdapter {\\n    /// @dev The WETH address.\\n    address private immutable WETH;\\n\\n    constructor(\\n        address _weth,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        address _conduitController\\n    ) LegacySwapAdapter(\\n        _factory,\\n        _pairCodeHash,\\n        _conduitController\\n    ) {\\n        WETH = _weth;\\n    }\\n\\n    /// @dev This function swaps ERC20 tokens from msg.sender\\n    ///      for an exact amount of output tokens, sent\\n    ///      to the specified recipient.\\n    /// @param amountOut        The exact amount of output token to receive.\\n    /// @param amountInMax      The maximum amount of input to be spent.\\n    /// @param path             The swap path.\\n    /// @param to               The recipient to receive output token.\\n    /// @param tokenSource      The token / approval source for input token.\\n    /// @param transferData     Additional data required depending on `source`.\\n    /// @param unwrapNative     Flag to unwrap for native token if output token is WETH.\\n    function swapExactOut(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address payable to,\\n        TokenSource tokenSource,\\n        bytes memory transferData,\\n        bool unwrapNative\\n    ) public payable {\\n        _legacySwapExactOut(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            unwrapNative ? address(this) : to,\\n            tokenSource,\\n            transferData\\n        );\\n\\n        if (unwrapNative) {\\n            IWETH(WETH).withdraw(amountOut);\\n            if (to != address(this)) {\\n                to.transfer(amountOut);\\n            }\\n        }\\n    }\\n\\n    /// @dev This function swaps an exact amount of tokens from address(this)\\n    ///      and sends a mimimum amount of output token to the specified recipient.\\n    /// @param amountIn         The exact amount of input token to be spent.\\n    /// @param amountOutMin     The minimum amount of output token to be received.\\n    /// @param path             The swap path.\\n    /// @param to               The recipient of output token.\\n    /// @param unwrapNative     Flag to unwrap for native token if output token is WETH.\\n    function swapExactIn(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address payable to,\\n        bool unwrapNative\\n    ) public payable {\\n        uint256 amountOut = _legacySwapExactIn(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            unwrapNative ? address(this) : to\\n        );\\n\\n        if (unwrapNative) {\\n            IWETH(WETH).withdraw(amountOut);\\n            if (to != address(this)) {\\n                to.transfer(amountOut);\\n            }\\n        }\\n    }\\n\\n    /// @dev This function performs the swaps as outlined in `path`. This contract's\\n    ///      entire balance of input token will be swapped for a minimum amount of\\n    ///      output token, sent to the specified recipient.\\n    /// @param amountOutMin     The minimum amount of output token to be received.\\n    /// @param path             The swap path.\\n    /// @param to               The recipient of output token.\\n    /// @param unwrapNative     Flag to unwrap for native token if output token is WETH.\\n    function swapMaxIn(\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address payable to,\\n        bool unwrapNative\\n    ) public payable {\\n        uint256 amountOut = _legacySwapExactIn(\\n            ERC20(path[0]).balanceOf(address(this)),\\n            amountOutMin,\\n            path,\\n            unwrapNative ? address(this) : to\\n        );\\n\\n        if (unwrapNative) {\\n            IWETH(WETH).withdraw(amountOut);\\n            if (to != address(this)) {\\n                to.transfer(amountOut);\\n            }\\n        }\\n\\n    }\\n\\n    /// @dev This function unwraps WETH held by address(this)\\n    ///      and transfers ETH to the specified recipient.\\n    /// @param amount       The amount of WETH to be unwrapped.\\n    /// @param to           The ETH recipient.\\n    function unwrapNativeToken(\\n        uint256 amount,\\n        address payable to\\n    ) public payable {\\n        IWETH(WETH).withdraw(amount);\\n\\n        if (to != address(this)) {\\n            to.transfer(amount);\\n        }\\n    }\\n\\n    /// @dev This function wraps ETH held by address(this).\\n    /// @param amount       The amount of ETH to wrap\\n    function wrapNativeToken(uint256 amount) public payable {\\n        IWETH(WETH).deposit{value: amount}();\\n    }\\n}\",\"keccak256\":\"0xa248adaa076556e710fe10385f86904dd497db370d9947ce578c14905f18026e\",\"license\":\"MIT\"},\"contracts/shoyu/lib/LibShoyu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nenum TokenSource {\\n    WALLET,\\n    CONDUIT\\n}\\n\\nstruct Adapter {\\n    address adapterAddress;\\n    bool isActive;\\n}\",\"keccak256\":\"0x62f8213d43b5a3b6ee253dc3ce89a4074b5cdbcaa60b31604cc923f20524b600\",\"license\":\"MIT\"},\"contracts/shoyu/lib/LibSushi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\n// Adapted from: https://github.com/sushiswap/limit-order/blob/a901749362691acd307f2370a876a33d33cde53e/contracts/libraries/UniswapV2Library.sol\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\n// returns sorted token addresses, used to handle return values from pairs sorted in this order\\nfunction sortTokens(\\n    address tokenA,\\n    address tokenB\\n) pure returns (address token0, address token1) {\\n    require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n}\\n\\n// calculates the CREATE2 address for a pair without making any external calls\\nfunction pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    bytes32 pairCodeHash\\n) pure returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = address(uint160(uint(keccak256(abi.encodePacked(\\n            hex'ff',\\n            factory,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            pairCodeHash // init code hash\\n        )))));\\n}\\n\\n// fetches and sorts the reserves for a pair\\nfunction getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    bytes32 pairCodeHash\\n) view returns (uint reserveA, uint reserveB) {\\n    (address token0,) = sortTokens(tokenA, tokenB);\\n    (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB, pairCodeHash)).getReserves();\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n}\\n\\n// given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\nfunction getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n) pure returns (uint amountOut) {\\n    require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n    require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n    uint amountInWithFee = amountIn* 997;\\n    uint numerator = amountInWithFee * reserveOut;\\n    uint denominator = reserveIn * 1000 + amountInWithFee;\\n    amountOut = numerator / denominator;\\n}\\n\\n// given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\nfunction getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n) pure returns (uint amountIn) {\\n    require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n    require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n    uint numerator = reserveIn * amountOut * 1000;\\n    uint denominator = (reserveOut - amountOut) * 997;\\n    amountIn = numerator / denominator + 1;\\n}\\n\\n// performs chained getAmountOut calculations on any number of pairs\\nfunction getAmountsOut(\\n    address factory,\\n    uint amountIn,\\n    address[] memory path,\\n    bytes32 pairCodeHash\\n) view returns (uint[] memory amounts) {\\n    require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n    amounts = new uint[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint i; i < path.length - 1; i++) {\\n        (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1], pairCodeHash);\\n        amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n}\\n\\n// performs chained getAmountIn calculations on any number of pairs\\nfunction getAmountsIn(\\n    address factory,\\n    uint amountOut,\\n    address[] memory path,\\n    bytes32 pairCodeHash\\n) view returns (uint[] memory amounts) {\\n    require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n    amounts = new uint[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint i = path.length - 1; i > 0; i--) {\\n        (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i], pairCodeHash);\\n        amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n}\\n\",\"keccak256\":\"0x9d6d1ae10f45688d641e7c0172059452c2496250ecbe2f5254fee7125e39d6f7\",\"license\":\"MIT\"},\"seaport/contracts/conduit/lib/ConduitEnums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nenum ConduitItemType {\\n    NATIVE, // unused\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\",\"keccak256\":\"0x1a84850bbff4b820573334c70ee0797462f20fd8c9b86fdebeacc85ecb1963a6\",\"license\":\"MIT\"},\"seaport/contracts/conduit/lib/ConduitStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { ConduitItemType } from \\\"./ConduitEnums.sol\\\";\\n\\nstruct ConduitTransfer {\\n    ConduitItemType itemType;\\n    address token;\\n    address from;\\n    address to;\\n    uint256 identifier;\\n    uint256 amount;\\n}\\n\\nstruct ConduitBatch1155Transfer {\\n    address token;\\n    address from;\\n    address to;\\n    uint256[] ids;\\n    uint256[] amounts;\\n}\\n\",\"keccak256\":\"0xe3e87c74dd79c59293e49b7236cc7befdc19886bb79af5fe53208b1772fd24f9\",\"license\":\"MIT\"},\"seaport/contracts/interfaces/ConduitControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title ConduitControllerInterface\\n * @author 0age\\n * @notice ConduitControllerInterface contains all external function interfaces,\\n *         structs, events, and errors for the conduit controller.\\n */\\ninterface ConduitControllerInterface {\\n    /**\\n     * @dev Track the conduit key, current owner, new potential owner, and open\\n     *      channels for each deployed conduit.\\n     */\\n    struct ConduitProperties {\\n        bytes32 key;\\n        address owner;\\n        address potentialOwner;\\n        address[] channels;\\n        mapping(address => uint256) channelIndexesPlusOne;\\n    }\\n\\n    /**\\n     * @dev Emit an event whenever a new conduit is created.\\n     *\\n     * @param conduit    The newly created conduit.\\n     * @param conduitKey The conduit key used to create the new conduit.\\n     */\\n    event NewConduit(address conduit, bytes32 conduitKey);\\n\\n    /**\\n     * @dev Emit an event whenever conduit ownership is transferred.\\n     *\\n     * @param conduit       The conduit for which ownership has been\\n     *                      transferred.\\n     * @param previousOwner The previous owner of the conduit.\\n     * @param newOwner      The new owner of the conduit.\\n     */\\n    event OwnershipTransferred(\\n        address indexed conduit,\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Emit an event whenever a conduit owner registers a new potential\\n     *      owner for that conduit.\\n     *\\n     * @param newPotentialOwner The new potential owner of the conduit.\\n     */\\n    event PotentialOwnerUpdated(address indexed newPotentialOwner);\\n\\n    /**\\n     * @dev Revert with an error when attempting to create a new conduit using a\\n     *      conduit key where the first twenty bytes of the key do not match the\\n     *      address of the caller.\\n     */\\n    error InvalidCreator();\\n\\n    /**\\n     * @dev Revert with an error when attempting to create a new conduit when no\\n     *      initial owner address is supplied.\\n     */\\n    error InvalidInitialOwner();\\n\\n    /**\\n     * @dev Revert with an error when attempting to set a new potential owner\\n     *      that is already set.\\n     */\\n    error NewPotentialOwnerAlreadySet(\\n        address conduit,\\n        address newPotentialOwner\\n    );\\n\\n    /**\\n     * @dev Revert with an error when attempting to cancel ownership transfer\\n     *      when no new potential owner is currently set.\\n     */\\n    error NoPotentialOwnerCurrentlySet(address conduit);\\n\\n    /**\\n     * @dev Revert with an error when attempting to interact with a conduit that\\n     *      does not yet exist.\\n     */\\n    error NoConduit();\\n\\n    /**\\n     * @dev Revert with an error when attempting to create a conduit that\\n     *      already exists.\\n     */\\n    error ConduitAlreadyExists(address conduit);\\n\\n    /**\\n     * @dev Revert with an error when attempting to update channels or transfer\\n     *      ownership of a conduit when the caller is not the owner of the\\n     *      conduit in question.\\n     */\\n    error CallerIsNotOwner(address conduit);\\n\\n    /**\\n     * @dev Revert with an error when attempting to register a new potential\\n     *      owner and supplying the null address.\\n     */\\n    error NewPotentialOwnerIsZeroAddress(address conduit);\\n\\n    /**\\n     * @dev Revert with an error when attempting to claim ownership of a conduit\\n     *      with a caller that is not the current potential owner for the\\n     *      conduit in question.\\n     */\\n    error CallerIsNotNewPotentialOwner(address conduit);\\n\\n    /**\\n     * @dev Revert with an error when attempting to retrieve a channel using an\\n     *      index that is out of range.\\n     */\\n    error ChannelOutOfRange(address conduit);\\n\\n    /**\\n     * @notice Deploy a new conduit using a supplied conduit key and assigning\\n     *         an initial owner for the deployed conduit. Note that the first\\n     *         twenty bytes of the supplied conduit key must match the caller\\n     *         and that a new conduit cannot be created if one has already been\\n     *         deployed using the same conduit key.\\n     *\\n     * @param conduitKey   The conduit key used to deploy the conduit. Note that\\n     *                     the first twenty bytes of the conduit key must match\\n     *                     the caller of this contract.\\n     * @param initialOwner The initial owner to set for the new conduit.\\n     *\\n     * @return conduit The address of the newly deployed conduit.\\n     */\\n    function createConduit(bytes32 conduitKey, address initialOwner)\\n        external\\n        returns (address conduit);\\n\\n    /**\\n     * @notice Open or close a channel on a given conduit, thereby allowing the\\n     *         specified account to execute transfers against that conduit.\\n     *         Extreme care must be taken when updating channels, as malicious\\n     *         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155\\n     *         tokens where the token holder has granted the conduit approval.\\n     *         Only the owner of the conduit in question may call this function.\\n     *\\n     * @param conduit The conduit for which to open or close the channel.\\n     * @param channel The channel to open or close on the conduit.\\n     * @param isOpen  A boolean indicating whether to open or close the channel.\\n     */\\n    function updateChannel(\\n        address conduit,\\n        address channel,\\n        bool isOpen\\n    ) external;\\n\\n    /**\\n     * @notice Initiate conduit ownership transfer by assigning a new potential\\n     *         owner for the given conduit. Once set, the new potential owner\\n     *         may call `acceptOwnership` to claim ownership of the conduit.\\n     *         Only the owner of the conduit in question may call this function.\\n     *\\n     * @param conduit The conduit for which to initiate ownership transfer.\\n     * @param newPotentialOwner The new potential owner of the conduit.\\n     */\\n    function transferOwnership(address conduit, address newPotentialOwner)\\n        external;\\n\\n    /**\\n     * @notice Clear the currently set potential owner, if any, from a conduit.\\n     *         Only the owner of the conduit in question may call this function.\\n     *\\n     * @param conduit The conduit for which to cancel ownership transfer.\\n     */\\n    function cancelOwnershipTransfer(address conduit) external;\\n\\n    /**\\n     * @notice Accept ownership of a supplied conduit. Only accounts that the\\n     *         current owner has set as the new potential owner may call this\\n     *         function.\\n     *\\n     * @param conduit The conduit for which to accept ownership.\\n     */\\n    function acceptOwnership(address conduit) external;\\n\\n    /**\\n     * @notice Retrieve the current owner of a deployed conduit.\\n     *\\n     * @param conduit The conduit for which to retrieve the associated owner.\\n     *\\n     * @return owner The owner of the supplied conduit.\\n     */\\n    function ownerOf(address conduit) external view returns (address owner);\\n\\n    /**\\n     * @notice Retrieve the conduit key for a deployed conduit via reverse\\n     *         lookup.\\n     *\\n     * @param conduit The conduit for which to retrieve the associated conduit\\n     *                key.\\n     *\\n     * @return conduitKey The conduit key used to deploy the supplied conduit.\\n     */\\n    function getKey(address conduit) external view returns (bytes32 conduitKey);\\n\\n    /**\\n     * @notice Derive the conduit associated with a given conduit key and\\n     *         determine whether that conduit exists (i.e. whether it has been\\n     *         deployed).\\n     *\\n     * @param conduitKey The conduit key used to derive the conduit.\\n     *\\n     * @return conduit The derived address of the conduit.\\n     * @return exists  A boolean indicating whether the derived conduit has been\\n     *                 deployed or not.\\n     */\\n    function getConduit(bytes32 conduitKey)\\n        external\\n        view\\n        returns (address conduit, bool exists);\\n\\n    /**\\n     * @notice Retrieve the potential owner, if any, for a given conduit. The\\n     *         current owner may set a new potential owner via\\n     *         `transferOwnership` and that owner may then accept ownership of\\n     *         the conduit in question via `acceptOwnership`.\\n     *\\n     * @param conduit The conduit for which to retrieve the potential owner.\\n     *\\n     * @return potentialOwner The potential owner, if any, for the conduit.\\n     */\\n    function getPotentialOwner(address conduit)\\n        external\\n        view\\n        returns (address potentialOwner);\\n\\n    /**\\n     * @notice Retrieve the status (either open or closed) of a given channel on\\n     *         a conduit.\\n     *\\n     * @param conduit The conduit for which to retrieve the channel status.\\n     * @param channel The channel for which to retrieve the status.\\n     *\\n     * @return isOpen The status of the channel on the given conduit.\\n     */\\n    function getChannelStatus(address conduit, address channel)\\n        external\\n        view\\n        returns (bool isOpen);\\n\\n    /**\\n     * @notice Retrieve the total number of open channels for a given conduit.\\n     *\\n     * @param conduit The conduit for which to retrieve the total channel count.\\n     *\\n     * @return totalChannels The total number of open channels for the conduit.\\n     */\\n    function getTotalChannels(address conduit)\\n        external\\n        view\\n        returns (uint256 totalChannels);\\n\\n    /**\\n     * @notice Retrieve an open channel at a specific index for a given conduit.\\n     *         Note that the index of a channel can change as a result of other\\n     *         channels being closed on the conduit.\\n     *\\n     * @param conduit      The conduit for which to retrieve the open channel.\\n     * @param channelIndex The index of the channel in question.\\n     *\\n     * @return channel The open channel, if any, at the specified channel index.\\n     */\\n    function getChannel(address conduit, uint256 channelIndex)\\n        external\\n        view\\n        returns (address channel);\\n\\n    /**\\n     * @notice Retrieve all open channels for a given conduit. Note that calling\\n     *         this function for a conduit with many channels will revert with\\n     *         an out-of-gas error.\\n     *\\n     * @param conduit The conduit for which to retrieve open channels.\\n     *\\n     * @return channels An array of open channels on the given conduit.\\n     */\\n    function getChannels(address conduit)\\n        external\\n        view\\n        returns (address[] memory channels);\\n\\n    /**\\n     * @dev Retrieve the conduit creation code and runtime code hashes.\\n     */\\n    function getConduitCodeHashes()\\n        external\\n        view\\n        returns (bytes32 creationCodeHash, bytes32 runtimeCodeHash);\\n}\\n\",\"keccak256\":\"0xb124e40645efdf5d92b48fd54eaeb0ba1d05fde62bf51e7684c1bc3bf5343388\",\"license\":\"MIT\"},\"seaport/contracts/interfaces/ConduitInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// prettier-ignore\\nimport {\\n    ConduitTransfer,\\n    ConduitBatch1155Transfer\\n} from \\\"../conduit/lib/ConduitStructs.sol\\\";\\n\\n/**\\n * @title ConduitInterface\\n * @author 0age\\n * @notice ConduitInterface contains all external function interfaces, events,\\n *         and errors for conduit contracts.\\n */\\ninterface ConduitInterface {\\n    /**\\n     * @dev Revert with an error when attempting to execute transfers using a\\n     *      caller that does not have an open channel.\\n     */\\n    error ChannelClosed(address channel);\\n\\n    /**\\n     * @dev Revert with an error when attempting to update a channel to the\\n     *      current status of that channel.\\n     */\\n    error ChannelStatusAlreadySet(address channel, bool isOpen);\\n\\n    /**\\n     * @dev Revert with an error when attempting to execute a transfer for an\\n     *      item that does not have an ERC20/721/1155 item type.\\n     */\\n    error InvalidItemType();\\n\\n    /**\\n     * @dev Revert with an error when attempting to update the status of a\\n     *      channel from a caller that is not the conduit controller.\\n     */\\n    error InvalidController();\\n\\n    /**\\n     * @dev Emit an event whenever a channel is opened or closed.\\n     *\\n     * @param channel The channel that has been updated.\\n     * @param open    A boolean indicating whether the conduit is open or not.\\n     */\\n    event ChannelUpdated(address indexed channel, bool open);\\n\\n    /**\\n     * @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\\n     *         with an open channel can call this function.\\n     *\\n     * @param transfers The ERC20/721/1155 transfers to perform.\\n     *\\n     * @return magicValue A magic value indicating that the transfers were\\n     *                    performed successfully.\\n     */\\n    function execute(ConduitTransfer[] calldata transfers)\\n        external\\n        returns (bytes4 magicValue);\\n\\n    /**\\n     * @notice Execute a sequence of batch 1155 transfers. Only a caller with an\\n     *         open channel can call this function.\\n     *\\n     * @param batch1155Transfers The 1155 batch transfers to perform.\\n     *\\n     * @return magicValue A magic value indicating that the transfers were\\n     *                    performed successfully.\\n     */\\n    function executeBatch1155(\\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\\n    ) external returns (bytes4 magicValue);\\n\\n    /**\\n     * @notice Execute a sequence of transfers, both single and batch 1155. Only\\n     *         a caller with an open channel can call this function.\\n     *\\n     * @param standardTransfers  The ERC20/721/1155 transfers to perform.\\n     * @param batch1155Transfers The 1155 batch transfers to perform.\\n     *\\n     * @return magicValue A magic value indicating that the transfers were\\n     *                    performed successfully.\\n     */\\n    function executeWithBatch1155(\\n        ConduitTransfer[] calldata standardTransfers,\\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\\n    ) external returns (bytes4 magicValue);\\n\\n    /**\\n     * @notice Open or close a given channel. Only callable by the controller.\\n     *\\n     * @param channel The channel to open or close.\\n     * @param isOpen  The status of the channel (either open or closed).\\n     */\\n    function updateChannel(address channel, bool isOpen) external;\\n}\\n\",\"keccak256\":\"0x3f3224e8455ccd73027671e44be8c5a2338c8cd4c0f1dca3fa0f15a44ef14f06\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "returnERC1155(address,uint256)": {
        "details": "Function to return any excess ERC1155 token from      address(this) to `msg.sender`.",
        "params": {
          "token": "The token to return to the caller.",
          "tokenId": "The token identifier of the asset."
        }
      },
      "returnERC20(address)": {
        "details": "Function to return any excess ERC20 tokens from address(this)      to `msg.sender`.",
        "params": {
          "token": "The token to return to the caller."
        }
      },
      "returnERC721(address,uint256)": {
        "details": "Function to return any left over ERC721 token from      address(this) to `msg.sender`.",
        "params": {
          "token": "The token to return to the caller.",
          "tokenId": "The token identifier of the asset."
        }
      },
      "swapExactIn(uint256,uint256,address[],address,bool)": {
        "details": "This function swaps an exact amount of tokens from address(this)      and sends a mimimum amount of output token to the specified recipient.",
        "params": {
          "amountIn": "The exact amount of input token to be spent.",
          "amountOutMin": "The minimum amount of output token to be received.",
          "path": "The swap path.",
          "to": "The recipient of output token.",
          "unwrapNative": "Flag to unwrap for native token if output token is WETH."
        }
      },
      "swapExactOut(uint256,uint256,address[],address,uint8,bytes,bool)": {
        "details": "This function swaps ERC20 tokens from msg.sender      for an exact amount of output tokens, sent      to the specified recipient.",
        "params": {
          "amountInMax": "The maximum amount of input to be spent.",
          "amountOut": "The exact amount of output token to receive.",
          "path": "The swap path.",
          "to": "The recipient to receive output token.",
          "tokenSource": "The token / approval source for input token.",
          "transferData": "Additional data required depending on `source`.",
          "unwrapNative": "Flag to unwrap for native token if output token is WETH."
        }
      },
      "swapMaxIn(uint256,address[],address,bool)": {
        "details": "This function performs the swaps as outlined in `path`. This contract's      entire balance of input token will be swapped for a minimum amount of      output token, sent to the specified recipient.",
        "params": {
          "amountOutMin": "The minimum amount of output token to be received.",
          "path": "The swap path.",
          "to": "The recipient of output token.",
          "unwrapNative": "Flag to unwrap for native token if output token is WETH."
        }
      },
      "transferERC1155From(address,address,uint256,uint256,uint8,bytes)": {
        "details": "Function to transfer an ERC1155 token from `msg.sender`      to a given recipient. Assets will be transferred from      a user's wallet with approvals being sourced from the      Shoyu contract or Seaport Conduit.",
        "params": {
          "amount": "The amount of the asset to transfer.",
          "data": "Additional encoded data required depending on `source`.",
          "source": "The NFT approval source.",
          "to": "The recipient of the transfer.",
          "token": "The ERC1155 token to transfer.",
          "tokenId": "The tokenId of the asset to transfer."
        }
      },
      "transferERC20From(address,address,uint256,uint8,bytes)": {
        "details": "Function to transfer ERC20 tokens from `msg.sender`      to a given recipient. Assets can be transferred from      a user's wallet with approvals being sourced from      Shoyu contract or Shoyu's Seaport Conduit.",
        "params": {
          "amount": "The amount to transfer.",
          "data": "Additional encoded data required depending on `source`.",
          "source": "The token / approval source.",
          "to": "The recipient of the transfer.",
          "token": "The ERC20 token to transfer."
        }
      },
      "transferERC721From(address,address,uint256,uint8,bytes)": {
        "details": "Function to transfer an ERC721 token from `msg.sender`      to a given recipient. Assets will be transferred from      a user's wallet with approvals being sourced from the      Shoyu contract or Seaport Conduit.",
        "params": {
          "data": "Additional encoded data required depending on `source`.",
          "source": "The NFT approval source.",
          "to": "The recipient of the transfer.",
          "token": "The ERC721 token to transfer.",
          "tokenId": "The tokenId of the asset to transfer."
        }
      },
      "unwrapNativeToken(uint256,address)": {
        "details": "This function unwraps WETH held by address(this)      and transfers ETH to the specified recipient.",
        "params": {
          "amount": "The amount of WETH to be unwrapped.",
          "to": "The ETH recipient."
        }
      },
      "wrapNativeToken(uint256)": {
        "details": "This function wraps ETH held by address(this).",
        "params": {
          "amount": "The amount of ETH to wrap"
        }
      }
    },
    "stateVariables": {
      "WETH": {
        "details": "The WETH address."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}