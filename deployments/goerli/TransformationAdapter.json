{
  "address": "0xF070932F7c748A585C54b87E7e16396529dcEb38",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_pairCodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_conduitController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bentobox",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bentoBox",
      "outputs": [
        {
          "internalType": "contract IBentoBoxMinimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "depositERC20ToBentoBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "returnERC1155",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "returnERC20",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "returnERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "unwrapNative",
          "type": "bool"
        }
      ],
      "name": "swapExactIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "enum TokenSource",
          "name": "tokenSource",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "transferData",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "unwrapNative",
          "type": "bool"
        }
      ],
      "name": "swapExactOut",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "unwrapNative",
          "type": "bool"
        }
      ],
      "name": "swapMaxIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum TokenSource",
          "name": "source",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferERC1155From",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum TokenSource",
          "name": "source",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferERC20From",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum TokenSource",
          "name": "source",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferERC721From",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "unwrapNativeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "wrapNativeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca6f1cc5ffb841898170a76c34dd319579adfd193fffd95bab3e3edbf45f57a0",
  "receipt": {
    "to": null,
    "from": "0x745E3182275791241eb92036a4A767664c456343",
    "contractAddress": "0xF070932F7c748A585C54b87E7e16396529dcEb38",
    "transactionIndex": 1,
    "gasUsed": "2344898",
    "logsBloom": "0x
    "blockHash": "0x43d8ffffbdccb284c7ceac1b61d6e9d0e7369e82a247eb7d970e2fb7ad30f50e",
    "transactionHash": "0xca6f1cc5ffb841898170a76c34dd319579adfd193fffd95bab3e3edbf45f57a0",
    "logs": [],
    "blockNumber": 7221968,
    "cumulativeGasUsed": "2442044",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    "0xc35DADB65012eC5796536bD9864eD8773aBc74C4",
    "0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303",
    "0x00000000006ce100a8b5ed8edf18ceef9e500697",
    "0xF5BCE5077908a1b7370B9ae04AdC565EBd643966"
  ],
  "numDeployments": 3,
  "solcInputHash": "f88f57136358a3b31827c2ad30206828",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_pairCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_conduitController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bentobox\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxMinimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"depositERC20ToBentoBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"returnERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"returnERC20\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"returnERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrapNative\",\"type\":\"bool\"}],\"name\":\"swapExactIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"enum TokenSource\",\"name\":\"tokenSource\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"transferData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"unwrapNative\",\"type\":\"bool\"}],\"name\":\"swapExactOut\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"unwrapNative\",\"type\":\"bool\"}],\"name\":\"swapMaxIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum TokenSource\",\"name\":\"source\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferERC1155From\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum TokenSource\",\"name\":\"source\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferERC20From\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum TokenSource\",\"name\":\"source\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferERC721From\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"unwrapNativeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrapNativeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositERC20ToBentoBox(address,address,uint256,uint256,uint256)\":{\"details\":\"Deposits ERC20 token from address(this) into the BentoBox.\",\"params\":{\"amount\":\"amount to be deposited\",\"share\":\"share to be deposited\",\"to\":\"receiver\",\"token\":\"token to deposit. Use token as address(0) when depositing native token\",\"value\":\"native token value to be deposited. Only use when token address is address(0)\"}},\"returnERC1155(address,uint256)\":{\"details\":\"Function to return any excess ERC1155 token from      address(this) to `msg.sender`.\",\"params\":{\"token\":\"The token to return to the caller.\",\"tokenId\":\"The token identifier of the asset.\"}},\"returnERC20(address)\":{\"details\":\"Function to return any excess ERC20 tokens from address(this)      to `msg.sender`.\",\"params\":{\"token\":\"The token to return to the caller.\"}},\"returnERC721(address,uint256)\":{\"details\":\"Function to return any left over ERC721 token from      address(this) to `msg.sender`.\",\"params\":{\"token\":\"The token to return to the caller.\",\"tokenId\":\"The token identifier of the asset.\"}},\"swapExactIn(uint256,uint256,address[],address,bool)\":{\"details\":\"This function swaps an exact amount of tokens from address(this)      and sends a mimimum amount of output token to the specified recipient.\",\"params\":{\"amountIn\":\"The exact amount of input token to be spent.\",\"amountOutMin\":\"The minimum amount of output token to be received.\",\"path\":\"The swap path.\",\"to\":\"The recipient of output token.\",\"unwrapNative\":\"Flag to unwrap for native token if output token is WETH.\"}},\"swapExactOut(uint256,uint256,address[],address,uint8,bytes,bool)\":{\"details\":\"This function swaps ERC20 tokens from msg.sender      for an exact amount of output tokens, sent      to the specified recipient.\",\"params\":{\"amountInMax\":\"The maximum amount of input to be spent.\",\"amountOut\":\"The exact amount of output token to receive.\",\"path\":\"The swap path.\",\"to\":\"The recipient to receive output token.\",\"tokenSource\":\"The token / approval source for input token.\",\"transferData\":\"Additional data required depending on `source`.\",\"unwrapNative\":\"Flag to unwrap for native token if output token is WETH.\"}},\"swapMaxIn(uint256,address[],address,bool)\":{\"details\":\"This function performs the swaps as outlined in `path`. This contract's      entire balance of input token will be swapped for a minimum amount of      output token, sent to the specified recipient.\",\"params\":{\"amountOutMin\":\"The minimum amount of output token to be received.\",\"path\":\"The swap path.\",\"to\":\"The recipient of output token.\",\"unwrapNative\":\"Flag to unwrap for native token if output token is WETH.\"}},\"transferERC1155From(address,address,uint256,uint256,uint8,bytes)\":{\"details\":\"Function to transfer an ERC1155 token from `msg.sender`      to a given recipient. Assets will be transferred from      a user's wallet with approvals being sourced from the      Shoyu contract or Seaport Conduit.\",\"params\":{\"amount\":\"The amount of the asset to transfer.\",\"data\":\"Additional encoded data required depending on `source`.\",\"source\":\"The NFT approval source.\",\"to\":\"The recipient of the transfer.\",\"token\":\"The ERC1155 token to transfer.\",\"tokenId\":\"The tokenId of the asset to transfer.\"}},\"transferERC20From(address,address,uint256,uint8,bytes)\":{\"details\":\"Function to transfer ERC20 tokens from `msg.sender`      to a given recipient. Assets can be transferred from      a user's bentobox or wallet. If funds are transferred      from a user's wallet, approvals can be sourced from the      Shoyu contract or Seaport Conduit.\",\"params\":{\"amount\":\"The amount to transfer.\",\"data\":\"Additional encoded data required depending on `source`.\",\"source\":\"The token / approval source.\",\"to\":\"The recipient of the transfer.\",\"token\":\"The ERC20 token to transfer.\"}},\"transferERC721From(address,address,uint256,uint8,bytes)\":{\"details\":\"Function to transfer an ERC721 token from `msg.sender`      to a given recipient. Assets will be transferred from      a user's wallet with approvals being sourced from the      Shoyu contract or Seaport Conduit.\",\"params\":{\"data\":\"Additional encoded data required depending on `source`.\",\"source\":\"The NFT approval source.\",\"to\":\"The recipient of the transfer.\",\"token\":\"The ERC721 token to transfer.\",\"tokenId\":\"The tokenId of the asset to transfer.\"}},\"unwrapNativeToken(uint256,address)\":{\"details\":\"This function unwraps WETH held by address(this)      and transfers ETH to the specified recipient.\",\"params\":{\"amount\":\"The amount of WETH to be unwrapped.\",\"to\":\"The ETH recipient.\"}},\"wrapNativeToken(uint256)\":{\"details\":\"This function wraps ETH held by address(this).\",\"params\":{\"amount\":\"The amount of ETH to wrap\"}}},\"stateVariables\":{\"WETH\":{\"details\":\"The WETH address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shoyu/adapters/Transform/TransformationAdapter.sol\":\"TransformationAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":19066},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Minimalist and gas efficient standard ERC1155 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    event URI(string value, uint256 indexed id);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ERC1155 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => mapping(uint256 => uint256)) public balanceOf;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             METADATA LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC1155 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        balanceOf[from][id] -= amount;\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        require(ids.length == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        require(msg.sender == from || isApprovedForAll[from][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        // Storing these outside the loop saves ~15 gas per iteration.\\n        uint256 id;\\n        uint256 amount;\\n\\n        for (uint256 i = 0; i < ids.length; ) {\\n            id = ids[i];\\n            amount = amounts[i];\\n\\n            balanceOf[from][id] -= amount;\\n            balanceOf[to][id] += amount;\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        require(owners.length == ids.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        balances = new uint256[](owners.length);\\n\\n        // Unchecked because the only math done is incrementing\\n        // the array index counter which cannot possibly overflow.\\n        unchecked {\\n            for (uint256 i = 0; i < owners.length; ++i) {\\n                balances[i] = balanceOf[owners[i]][ids[i]];\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0xd9b67a26 || // ERC165 Interface ID for ERC1155\\n            interfaceId == 0x0e89341c; // ERC165 Interface ID for ERC1155MetadataURI\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        balanceOf[to][id] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), to, id, amount);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155Received(msg.sender, address(0), id, amount, data) ==\\n                    ERC1155TokenReceiver.onERC1155Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[to][ids[i]] += amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), to, ids, amounts);\\n\\n        require(\\n            to.code.length == 0\\n                ? to != address(0)\\n                : ERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, address(0), ids, amounts, data) ==\\n                    ERC1155TokenReceiver.onERC1155BatchReceived.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _batchBurn(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        uint256 idsLength = ids.length; // Saves MLOADs.\\n\\n        require(idsLength == amounts.length, \\\"LENGTH_MISMATCH\\\");\\n\\n        for (uint256 i = 0; i < idsLength; ) {\\n            balanceOf[from][ids[i]] -= amounts[i];\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, from, address(0), ids, amounts);\\n    }\\n\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        balanceOf[from][id] -= amount;\\n\\n        emit TransferSingle(msg.sender, from, address(0), id, amount);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC1155 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC1155.sol)\\nabstract contract ERC1155TokenReceiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC1155TokenReceiver.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0ed909c57d26645a267388dcec3ba5b8ce7510afb9ed9561da45b0d386f90ab8\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xb59c7c25eca386f39da4819a9f70f89b73b7583d5f5127a83ffe5339800b1183\",\"license\":\"AGPL-3.0-only\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x08f9a63b34855eec941be8d36a04424f1a1725a2c030373fcef3afeb480ca385\",\"license\":\"GPL-3.0\"},\"@sushiswap/core/contracts/uniswapv2/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0x680172744962444cd2f8470d50991336b431fe4e29dd835018ac2f36e53344be\",\"license\":\"GPL-3.0\"},\"contracts/shoyu/adapters/Transfer/BentoAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n/// @dev Adapted from: https://github.com/sushiswap/sushiXswap/blob/44057bca0b0a4c43002787fdc9cc90b760cf3682/contracts/adapters/BentoAdapter.sol\\n\\npragma solidity >=0.8.11;\\n\\nimport \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport \\\"../../../sushiswap/IBentoBoxMinimal.sol\\\";\\n\\n/// @title BentoAdapter\\n/// @notice Adapter which provides all functions of BentoBox require by this contract.\\n/// @dev These are generic functions, make sure, only msg.sender, address(this) and address(bentoBox)\\n/// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\nabstract contract BentoAdapter {\\n    IBentoBoxMinimal public immutable bentoBox;\\n\\n    constructor(address _bentoBox) {\\n        bentoBox = IBentoBoxMinimal(_bentoBox);\\n    }\\n\\n    /// @dev Deposits ERC20 token from address(this) into the BentoBox.\\n    /// @param token token to deposit. Use token as address(0) when depositing native token\\n    /// @param to receiver\\n    /// @param amount amount to be deposited\\n    /// @param share share to be deposited\\n    /// @param value native token value to be deposited. Only use when token address is address(0)\\n    function depositERC20ToBentoBox(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) public {\\n        _depositToBentoBox(token, address(this), to, amount, share, value);\\n    }\\n\\n    /// @notice Deposits the token from users wallet into the BentoBox.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to deposit. Use token as address(0) when depositing native token\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to be deposited\\n    /// @param share share to be deposited\\n    /// @param value native token value to be deposited. Only use when token address is address(0)\\n    function _depositToBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        uint256 value\\n    ) internal {\\n        bentoBox.deposit{value: value}(token, from, to, amount, share);\\n    }\\n\\n    /// @notice Transfers the token from bentobox user to another or withdraw it to another address.\\n    /// @dev Make sure, only msg.sender, address(this) and address(bentoBox)\\n    /// are passed in the from param, or else the attacker can sifu user's funds in bentobox.\\n    /// Pass either amount or share.\\n    /// @param token token to transfer. For native tokens, use wnative token address\\n    /// @param from sender\\n    /// @param to receiver\\n    /// @param amount amount to transfer\\n    /// @param share share to transfer\\n    /// @param unwrapBento use true for withdraw and false for transfer\\n    function _transferERC20FromBentoBox(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share,\\n        bool unwrapBento\\n    ) internal {\\n        if (unwrapBento) {\\n            bentoBox.withdraw(token, from, to, amount, share);\\n        } else {\\n            if (amount > 0) {\\n                share = bentoBox.toShare(token, amount, false);\\n            }\\n            bentoBox.transfer(token, from, to, share);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4061c7216ccdcd3b776fce751ca6afac3d9addabef0866d59bc4f301aa62dc12\",\"license\":\"GPL-3.0-or-later\"},\"contracts/shoyu/adapters/Transfer/ConduitAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport { ConduitControllerInterface } from \\\"seaport/contracts/interfaces/ConduitControllerInterface.sol\\\";\\nimport { ConduitInterface } from \\\"seaport/contracts/interfaces/ConduitInterface.sol\\\";\\nimport { ConduitTransfer } from \\\"seaport/contracts/conduit/lib/ConduitStructs.sol\\\";\\nimport { ConduitItemType } from \\\"seaport/contracts/conduit/lib/ConduitEnums.sol\\\";\\n\\ncontract ConduitAdapter {\\n    // Allow for interaction with the conduit controller.\\n    ConduitControllerInterface private immutable _CONDUIT_CONTROLLER;\\n    // Cache the conduit creation hash used by the conduit controller.\\n    bytes32 private immutable _CONDUIT_CREATION_CODE_HASH;\\n\\n    constructor(address _conduitController) {\\n        // Get the conduit creation code hash from the supplied conduit\\n        // controller and set it as an immutable.\\n        ConduitControllerInterface conduitController = ConduitControllerInterface(\\n            _conduitController\\n        );\\n        (_CONDUIT_CREATION_CODE_HASH, ) = conduitController.getConduitCodeHashes();\\n\\n        // Set the supplied conduit controller as an immutable.\\n        _CONDUIT_CONTROLLER = conduitController;\\n    }\\n\\n    /// @dev This function derives the conduit address from the deployer,\\n    ///      conduit key, and creation code hash.\\n    function _getConduit(bytes32 conduitKey) internal view returns (address conduit) {\\n        conduit = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            address(_CONDUIT_CONTROLLER),\\n                            conduitKey,\\n                            _CONDUIT_CREATION_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    /// @dev This function transfers an ERC20 using a Seaport\\n    ///      Conduit to source approval.\\n    /// @notice Only use `msg.sender` or `address(this)` in the from param.\\n    /// @param token        The ERC20 token to transfer.\\n    /// @param from         The originator of the transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param amount       The amount of ERC20 to be sent.\\n    /// @param conduitKey   The key of the conduit to used.\\n    function _transferERC20WithConduit(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes32 conduitKey\\n    ) internal {\\n        address conduit = _getConduit(conduitKey);\\n\\n        ConduitTransfer[] memory conduitTransfers = new ConduitTransfer[](1);\\n        conduitTransfers[0] = ConduitTransfer(\\n            ConduitItemType.ERC20,\\n            token,\\n            from,\\n            to,\\n            0,\\n            amount\\n        );\\n\\n        // Call the conduit and execute transfer.\\n        ConduitInterface(conduit).execute(conduitTransfers);\\n    }\\n\\n    /// @dev This function transfers an ERC721 token using a Seaport\\n    ///      Conduit to source approval.\\n    /// @notice Only use `msg.sender` or `address(this)` in the from param.\\n    /// @param token        The ERC721 token to transfer.\\n    /// @param from         The originator of the transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param tokenId      The tokenId of the ERC721 to be sent.\\n    /// @param conduitKey   The key of the conduit to used.\\n    function _transferERC721WithConduit(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes32 conduitKey\\n    ) internal {\\n        address conduit = _getConduit(conduitKey);\\n\\n        ConduitTransfer[] memory conduitTransfers = new ConduitTransfer[](1);\\n        conduitTransfers[0] = ConduitTransfer(\\n            ConduitItemType.ERC721,\\n            token,\\n            from,\\n            to,\\n            tokenId,\\n            1\\n        );\\n\\n        // Call the conduit and execute transfer.\\n        ConduitInterface(conduit).execute(conduitTransfers);\\n    }\\n\\n    /// @dev This function transfers an ERC1155 token using a Seaport\\n    ///      Conduit to source approval.\\n    /// @notice Only use `msg.sender` or `address(this)` in the from param.\\n    /// @param token        The ERC1155 token to transfer.\\n    /// @param from         The originator of the transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param tokenId      The tokenId of the ERC1155 to be sent.\\n    /// @param amount       The amount of the ERC1155 to be sent.\\n    /// @param conduitKey   The key of the conduit to used.\\n    function _transferERC1155WithConduit(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        bytes32 conduitKey\\n    ) internal {\\n        address conduit = _getConduit(conduitKey);\\n\\n        ConduitTransfer[] memory conduitTransfers = new ConduitTransfer[](1);\\n        conduitTransfers[0] = ConduitTransfer(\\n            ConduitItemType.ERC1155,\\n            token,\\n            from,\\n            to,\\n            tokenId,\\n            amount\\n        );\\n\\n        // Call the conduit and execute transfer.\\n        ConduitInterface(conduit).execute(conduitTransfers);\\n    }\\n}\",\"keccak256\":\"0x02c920eaaada2a15eaca0bb144724a480290992e32897ba97fd491e5e73b33fa\",\"license\":\"MIT\"},\"contracts/shoyu/adapters/Transfer/TransferAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\nimport \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"@rari-capital/solmate/src/tokens/ERC1155.sol\\\";\\nimport \\\"./ConduitAdapter.sol\\\";\\nimport \\\"./BentoAdapter.sol\\\";\\nimport { TokenSource } from \\\"../../lib/LibShoyu.sol\\\";\\n\\ncontract TransferAdapter is ConduitAdapter, BentoAdapter {\\n    constructor(\\n        address _conduitController,\\n        address _bentoBox\\n    )\\n        ConduitAdapter(_conduitController)\\n        BentoAdapter(_bentoBox)\\n    {}\\n\\n    /// @dev Function to transfer ERC20 tokens from `msg.sender`\\n    ///      to a given recipient. Assets can be transferred from\\n    ///      a user's bentobox or wallet. If funds are transferred\\n    ///      from a user's wallet, approvals can be sourced from the\\n    ///      Shoyu contract or Seaport Conduit.\\n    /// @param token        The ERC20 token to transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param amount       The amount to transfer.\\n    /// @param source       The token / approval source.\\n    /// @param data         Additional encoded data required depending on `source`.\\n    function transferERC20From(\\n        address token,\\n        address to,\\n        uint256 amount,\\n        TokenSource source,\\n        bytes memory data\\n    ) public {\\n        if (source == TokenSource.WALLET) {\\n            ERC20(token).transferFrom(msg.sender, to, amount);\\n        } else if (source == TokenSource.CONDUIT) {\\n            bytes32 conduitKey = abi.decode(data, (bytes32));\\n\\n            _transferERC20WithConduit(\\n                token,\\n                msg.sender,\\n                to,\\n                amount,\\n                conduitKey\\n            );\\n        } else if (source == TokenSource.BENTO) {\\n            bool unwrapBento = abi.decode(data, (bool));\\n\\n            _transferERC20FromBentoBox(\\n                token,\\n                msg.sender,\\n                to,\\n                amount,\\n                0,\\n                unwrapBento\\n            );\\n        } else {\\n            revert(\\\"transferERC20From/INVALID_TOKEN_SOURCE\\\");\\n        }\\n    }\\n\\n    /// @dev Function to transfer an ERC721 token from `msg.sender`\\n    ///      to a given recipient. Assets will be transferred from\\n    ///      a user's wallet with approvals being sourced from the\\n    ///      Shoyu contract or Seaport Conduit.\\n    /// @param token        The ERC721 token to transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param tokenId      The tokenId of the asset to transfer.\\n    /// @param source       The NFT approval source.\\n    /// @param data         Additional encoded data required depending on `source`.\\n    function transferERC721From(\\n        address token,\\n        address to,\\n        uint256 tokenId,\\n        TokenSource source,\\n        bytes memory data\\n    ) public {\\n        if (source == TokenSource.WALLET) {\\n            ERC721(token).safeTransferFrom(\\n                msg.sender,\\n                to,\\n                tokenId\\n            );\\n        } else if (source == TokenSource.CONDUIT) {\\n            bytes32 conduitKey = abi.decode(data, (bytes32));\\n\\n            _transferERC721WithConduit(\\n                token,\\n                msg.sender,\\n                to,\\n                tokenId,\\n                conduitKey\\n            );\\n        } else {\\n            revert(\\\"transferERC721From/INVALID_TOKEN_SOURCE\\\");\\n        }\\n    }\\n\\n    /// @dev Function to transfer an ERC1155 token from `msg.sender`\\n    ///      to a given recipient. Assets will be transferred from\\n    ///      a user's wallet with approvals being sourced from the\\n    ///      Shoyu contract or Seaport Conduit.\\n    /// @param token        The ERC1155 token to transfer.\\n    /// @param to           The recipient of the transfer.\\n    /// @param tokenId      The tokenId of the asset to transfer.\\n    /// @param amount       The amount of the asset to transfer.\\n    /// @param source       The NFT approval source.\\n    /// @param data         Additional encoded data required depending on `source`.\\n    function transferERC1155From(\\n        address token,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        TokenSource source,\\n        bytes memory data\\n    ) public {\\n        if (source == TokenSource.WALLET) {\\n            ERC1155(token).safeTransferFrom(\\n                msg.sender,\\n                to,\\n                tokenId,\\n                amount,\\n                \\\"0x\\\"\\n            );\\n        } else if (source == TokenSource.CONDUIT) {\\n           bytes32 conduitKey = abi.decode(data, (bytes32));\\n\\n           _transferERC1155WithConduit(\\n                token,\\n                msg.sender,\\n                to,\\n                tokenId,\\n                amount,\\n                conduitKey\\n            );\\n        } else {\\n            revert(\\\"transferERC1155From/INVALID_TOKEN_SOURCE\\\");\\n        }\\n    }\\n\\n    /// @dev Function to return any excess ERC20 tokens from address(this)\\n    ///      to `msg.sender`.\\n    /// @param token        The token to return to the caller.\\n    function returnERC20(address token) external payable {\\n        uint256 balance = ERC20(token).balanceOf(address(this));\\n        if (balance > 0) {\\n            ERC20(token).transfer(msg.sender, balance);\\n        }\\n    }\\n\\n    /// @dev Function to return any left over ERC721 token from\\n    ///      address(this) to `msg.sender`.\\n    /// @param token        The token to return to the caller.\\n    /// @param tokenId      The token identifier of the asset.\\n    function returnERC721(address token, uint256 tokenId) external {\\n        if (ERC721(token).ownerOf(tokenId) == address(this)) {\\n            ERC721(token).transferFrom(address(this), msg.sender, tokenId);\\n        }\\n    }\\n\\n    /// @dev Function to return any excess ERC1155 token from\\n    ///      address(this) to `msg.sender`.\\n    /// @param token        The token to return to the caller.\\n    /// @param tokenId      The token identifier of the asset.\\n    function returnERC1155(address token, uint256 tokenId) external {\\n        uint256 balance = ERC1155(token).balanceOf(address(this), tokenId);\\n        if (balance > 0) {\\n            ERC1155(token).safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                tokenId,\\n                balance,\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    /// @dev Transfers some amount of ETH to the given recipient and\\n    ///      reverts if the transfer fails.\\n    /// @param to       The recipient of the ETH.\\n    /// @param amount   The amount of ETH to transfer.\\n    function _transferETH(address payable to, uint256 amount) internal {\\n        assembly {\\n            let success := call(gas(), to, amount, 0, 0, 0, 0)\\n            if eq(success, 0) { revert(0, 0) }\\n        }\\n    }\\n}\",\"keccak256\":\"0x8a2839e1a30534d6d174d7cc91d43b718a62c9a870f7e0a3fef15886c54af634\",\"license\":\"MIT\"},\"contracts/shoyu/adapters/Transform/LegacySwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.7;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../Transfer/ConduitAdapter.sol\\\";\\nimport \\\"../Transfer/TransferAdapter.sol\\\";\\nimport { pairFor, sortTokens, getAmountsIn, getAmountsOut } from \\\"../../lib/LibSushi.sol\\\";\\nimport { TokenSource } from \\\"../../lib/LibShoyu.sol\\\";\\n\\ncontract LegacySwapAdapter is TransferAdapter {\\n    /// @dev The UniswapV2Factory address.\\n    address private immutable factory;\\n    /// @dev The UniswapV2 pair init code.\\n    bytes32 private immutable pairCodeHash;\\n\\n    constructor(\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        address _conduitController,\\n        address _bentobox\\n    ) TransferAdapter (_conduitController, _bentobox) {\\n        factory = _factory;\\n        pairCodeHash = _pairCodeHash;\\n    }\\n\\n    /// @dev This function transfers the input token from msg.sender and\\n    ///      performs the swaps outlined in `path`. An exact amount of the\\n    ///      output token is sent to the specified recipient.\\n    /// @param amountOut        The exact amount of output token to receive.\\n    /// @param amountInMax      The maximum amount of input to be spent.\\n    /// @param path             The swap path.\\n    /// @param to               The recipient to receive output token.\\n    /// @param tokenSource      The token / approval source for input token.\\n    /// @param transferData     Additional data required depending on `source`.\\n    function _legacySwapExactOut(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address to,\\n        TokenSource tokenSource,\\n        bytes memory transferData\\n    ) internal returns (uint256 amountIn) {\\n        uint256[] memory amounts = getAmountsIn(\\n            factory,\\n            amountOut,\\n            path,\\n            pairCodeHash\\n        );\\n        amountIn = amounts[0];\\n\\n        require(amountIn <= amountInMax, '_legacySwapExactOut/EXCESSIVE_AMOUNT_IN');\\n\\n        transferERC20From(\\n            path[0],\\n            pairFor(\\n                factory,\\n                path[0],\\n                path[1],\\n                pairCodeHash\\n            ),\\n            amountIn,\\n            tokenSource,\\n            transferData\\n        );\\n\\n        _swap(amounts, path, to);\\n    }\\n\\n    /// @dev This function transfers an exact amount of the input token\\n    ///      from address(this) and performs the swaps outlined in `path`.\\n    ///      The output token is sent to the specified recipient.\\n    /// @param amountIn         The exact amount of input token to be spent.\\n    /// @param amountOutMin     The minimum amount of output token to be received.\\n    /// @param path             The swap path.\\n    /// @param to               The recipient of output token.\\n    function _legacySwapExactIn(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to\\n    ) internal returns (uint256 amountOut) {\\n        uint256[] memory amounts = getAmountsOut(\\n            factory,\\n            amountIn,\\n            path,\\n            pairCodeHash\\n        );\\n        amountOut = amounts[amounts.length - 1];\\n\\n        require(amountOut >= amountOutMin, \\\"_legacySwapExactIn/EXCESSIVE_AMOUNT_OUT\\\");\\n\\n        ERC20(path[0]).transfer(\\n            pairFor(\\n                factory,\\n                path[0],\\n                path[1],\\n                pairCodeHash\\n            ),\\n            amountIn\\n        );\\n\\n        _swap(amounts, path, to);\\n    }\\n\\n    /// @dev Performs swaps as outlined in `path` and sends the output\\n    ///      token to the specified recipient.\\n    /// @notice Requires the initial amount to have already been sent to the\\n    ///         first pair.\\n    /// @param amounts  The amounts to be swapped.\\n    /// @param path     The swap path.\\n    /// @param _to      The recipient of output token.\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n\\n            (address token0, ) = sortTokens(input, output);\\n\\n            uint256 amountOut = amounts[i + 1];\\n\\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\\n                ? (uint256(0), amountOut)\\n                : (amountOut, uint256(0));\\n            address to = i < path.length - 2 ? pairFor(factory, output, path[i + 2], pairCodeHash) : _to;\\n\\n            IUniswapV2Pair(pairFor(factory, input, output, pairCodeHash)).swap(\\n                amount0Out,\\n                amount1Out,\\n                to,\\n                new bytes(0)\\n            );\\n        }\\n    }\\n\\n    \\n}\",\"keccak256\":\"0xa41be9d65d81f04cbdec689ae3f7a6e996e94a84733de5d4430fd61482011ec2\",\"license\":\"MIT\"},\"contracts/shoyu/adapters/Transform/TransformationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11;\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IWETH.sol\\\";\\nimport \\\"./LegacySwapAdapter.sol\\\";\\n\\ncontract TransformationAdapter is LegacySwapAdapter {\\n    /// @dev The WETH address.\\n    address private immutable WETH;\\n\\n    constructor(\\n        address _weth,\\n        address _factory,\\n        bytes32 _pairCodeHash,\\n        address _conduitController,\\n        address _bentobox\\n    ) LegacySwapAdapter(\\n        _factory,\\n        _pairCodeHash,\\n        _conduitController,\\n        _bentobox\\n    ) {\\n        WETH = _weth;\\n    }\\n\\n    /// @dev This function swaps ERC20 tokens from msg.sender\\n    ///      for an exact amount of output tokens, sent\\n    ///      to the specified recipient.\\n    /// @param amountOut        The exact amount of output token to receive.\\n    /// @param amountInMax      The maximum amount of input to be spent.\\n    /// @param path             The swap path.\\n    /// @param to               The recipient to receive output token.\\n    /// @param tokenSource      The token / approval source for input token.\\n    /// @param transferData     Additional data required depending on `source`.\\n    /// @param unwrapNative     Flag to unwrap for native token if output token is WETH.\\n    function swapExactOut(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] memory path,\\n        address payable to,\\n        TokenSource tokenSource,\\n        bytes memory transferData,\\n        bool unwrapNative\\n    ) public payable {\\n        _legacySwapExactOut(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            unwrapNative ? address(this) : to,\\n            tokenSource,\\n            transferData\\n        );\\n\\n        if (unwrapNative) {\\n            IWETH(WETH).withdraw(amountOut);\\n            if (to != address(this)) {\\n                _transferETH(to, amountOut);\\n            }\\n        }\\n    }\\n\\n    /// @dev This function swaps an exact amount of tokens from address(this)\\n    ///      and sends a mimimum amount of output token to the specified recipient.\\n    /// @param amountIn         The exact amount of input token to be spent.\\n    /// @param amountOutMin     The minimum amount of output token to be received.\\n    /// @param path             The swap path.\\n    /// @param to               The recipient of output token.\\n    /// @param unwrapNative     Flag to unwrap for native token if output token is WETH.\\n    function swapExactIn(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address payable to,\\n        bool unwrapNative\\n    ) public payable {\\n        uint256 amountOut = _legacySwapExactIn(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            unwrapNative ? address(this) : to\\n        );\\n\\n        if (unwrapNative) {\\n            IWETH(WETH).withdraw(amountOut);\\n            if (to != address(this)) {\\n                _transferETH(to, amountOut);\\n            }\\n        }\\n    }\\n\\n    /// @dev This function performs the swaps as outlined in `path`. This contract's\\n    ///      entire balance of input token will be swapped for a minimum amount of\\n    ///      output token, sent to the specified recipient.\\n    /// @param amountOutMin     The minimum amount of output token to be received.\\n    /// @param path             The swap path.\\n    /// @param to               The recipient of output token.\\n    /// @param unwrapNative     Flag to unwrap for native token if output token is WETH.\\n    function swapMaxIn(\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address payable to,\\n        bool unwrapNative\\n    ) public payable {\\n        uint256 amountOut = _legacySwapExactIn(\\n            ERC20(path[0]).balanceOf(address(this)),\\n            amountOutMin,\\n            path,\\n            unwrapNative ? address(this) : to\\n        );\\n\\n        if (unwrapNative) {\\n            IWETH(WETH).withdraw(amountOut);\\n            if (to != address(this)) {\\n                _transferETH(to, amountOut);\\n            }\\n        }\\n\\n    }\\n\\n    /// @dev This function unwraps WETH held by address(this)\\n    ///      and transfers ETH to the specified recipient.\\n    /// @param amount       The amount of WETH to be unwrapped.\\n    /// @param to           The ETH recipient.\\n    function unwrapNativeToken(\\n        uint256 amount,\\n        address payable to\\n    ) public payable {\\n        IWETH(WETH).withdraw(amount);\\n        if (to != address(this)) {\\n            _transferETH(to, amount);\\n        }\\n    }\\n\\n    /// @dev This function wraps ETH held by address(this).\\n    /// @param amount       The amount of ETH to wrap\\n    function wrapNativeToken(uint256 amount) public payable {\\n        IWETH(WETH).deposit{value: amount}();\\n    }\\n}\",\"keccak256\":\"0x19654b94d230fd1f9069b25f9b10f715a93d93cd737a2dd024977c897d8e03bc\",\"license\":\"MIT\"},\"contracts/shoyu/lib/LibShoyu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nenum TokenSource {\\n    WALLET,\\n    CONDUIT,\\n    BENTO\\n}\\n\\nstruct Adapter {\\n    address adapterAddress;\\n    bool isActive;\\n}\",\"keccak256\":\"0xf8952c03413eef80ca3e27ee41b209eda0099f16981680c38fe5865a2de201f9\",\"license\":\"MIT\"},\"contracts/shoyu/lib/LibSushi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\n// Adapted from: https://github.com/sushiswap/limit-order/blob/a901749362691acd307f2370a876a33d33cde53e/contracts/libraries/UniswapV2Library.sol\\n\\nimport \\\"@sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol\\\";\\n\\n// returns sorted token addresses, used to handle return values from pairs sorted in this order\\nfunction sortTokens(\\n    address tokenA,\\n    address tokenB\\n) pure returns (address token0, address token1) {\\n    require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n}\\n\\n// calculates the CREATE2 address for a pair without making any external calls\\nfunction pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    bytes32 pairCodeHash\\n) pure returns (address pair) {\\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    pair = address(uint160(uint(keccak256(abi.encodePacked(\\n            hex'ff',\\n            factory,\\n            keccak256(abi.encodePacked(token0, token1)),\\n            pairCodeHash // init code hash\\n        )))));\\n}\\n\\n// fetches and sorts the reserves for a pair\\nfunction getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB,\\n    bytes32 pairCodeHash\\n) view returns (uint reserveA, uint reserveB) {\\n    (address token0,) = sortTokens(tokenA, tokenB);\\n    (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB, pairCodeHash)).getReserves();\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n}\\n\\n// given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\nfunction getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n) pure returns (uint amountOut) {\\n    require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n    require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n    uint amountInWithFee = amountIn* 997;\\n    uint numerator = amountInWithFee * reserveOut;\\n    uint denominator = reserveIn * 1000 + amountInWithFee;\\n    amountOut = numerator / denominator;\\n}\\n\\n// given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\nfunction getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n) pure returns (uint amountIn) {\\n    require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n    require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n    uint numerator = reserveIn * amountOut * 1000;\\n    uint denominator = (reserveOut - amountOut) * 997;\\n    amountIn = numerator / denominator + 1;\\n}\\n\\n// performs chained getAmountOut calculations on any number of pairs\\nfunction getAmountsOut(\\n    address factory,\\n    uint amountIn,\\n    address[] memory path,\\n    bytes32 pairCodeHash\\n) view returns (uint[] memory amounts) {\\n    require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n    amounts = new uint[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint i; i < path.length - 1; i++) {\\n        (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1], pairCodeHash);\\n        amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n}\\n\\n// performs chained getAmountIn calculations on any number of pairs\\nfunction getAmountsIn(\\n    address factory,\\n    uint amountOut,\\n    address[] memory path,\\n    bytes32 pairCodeHash\\n) view returns (uint[] memory amounts) {\\n    require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\\n    amounts = new uint[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint i = path.length - 1; i > 0; i--) {\\n        (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i], pairCodeHash);\\n        amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n}\\n\",\"keccak256\":\"0x9d6d1ae10f45688d641e7c0172059452c2496250ecbe2f5254fee7125e39d6f7\",\"license\":\"MIT\"},\"contracts/sushiswap/IBentoBoxMinimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.8.11;\\n\\n/// @notice Minimal BentoBox vault interface.\\n/// @dev `token` is aliased as `address` from `IERC20` for simplicity.\\ninterface IBentoBoxMinimal {\\n    /// @notice Balance per ERC-20 token per account in shares.\\n    function balanceOf(address, address) external view returns (uint256);\\n\\n    /// @dev Helper function to represent an `amount` of `token` in shares.\\n    /// @param token The ERC-20 token.\\n    /// @param amount The `token` amount.\\n    /// @param roundUp If the result `share` should be rounded up.\\n    /// @return share The token amount represented in shares.\\n    function toShare(\\n        address token,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    /// @dev Helper function to represent shares back into the `token` amount.\\n    /// @param token The ERC-20 token.\\n    /// @param share The amount of shares.\\n    /// @param roundUp If the result should be rounded up.\\n    /// @return amount The share amount back into native representation.\\n    function toAmount(\\n        address token,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n\\n    /// @notice Registers this contract so that users can approve it for BentoBox.\\n    function registerProtocol() external;\\n\\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\\n    /// @param token_ The ERC-20 token to deposit.\\n    /// @param from which account to pull the tokens.\\n    /// @param to which account to push the tokens.\\n    /// @param amount Token amount in native representation to deposit.\\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\\n    /// @return amountOut The amount deposited.\\n    /// @return shareOut The deposited amount represented in shares.\\n    function deposit(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Withdraws an amount of `token` from a user account.\\n    /// @param token_ The ERC-20 token to withdraw.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\\n    /// @param share Like above, but `share` takes precedence over `amount`.\\n    function withdraw(\\n        address token_,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    /// @notice Transfer shares from a user account to another one.\\n    /// @param token The ERC-20 token to transfer.\\n    /// @param from which user to pull the tokens.\\n    /// @param to which user to push the tokens.\\n    /// @param share The amount of `token` in shares.\\n    function transfer(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 share\\n    ) external;\\n\\n    function setMasterContractApproval(\\n        address user,\\n        address masterContract,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc50f00779e912051ed313b14084df6a35bc1bf1b2d14a2e4b0dc0ba52f2efdab\",\"license\":\"GPL-3.0-or-later\"},\"seaport/contracts/conduit/lib/ConduitEnums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nenum ConduitItemType {\\n    NATIVE, // unused\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\",\"keccak256\":\"0x1a84850bbff4b820573334c70ee0797462f20fd8c9b86fdebeacc85ecb1963a6\",\"license\":\"MIT\"},\"seaport/contracts/conduit/lib/ConduitStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { ConduitItemType } from \\\"./ConduitEnums.sol\\\";\\n\\nstruct ConduitTransfer {\\n    ConduitItemType itemType;\\n    address token;\\n    address from;\\n    address to;\\n    uint256 identifier;\\n    uint256 amount;\\n}\\n\\nstruct ConduitBatch1155Transfer {\\n    address token;\\n    address from;\\n    address to;\\n    uint256[] ids;\\n    uint256[] amounts;\\n}\\n\",\"keccak256\":\"0xe3e87c74dd79c59293e49b7236cc7befdc19886bb79af5fe53208b1772fd24f9\",\"license\":\"MIT\"},\"seaport/contracts/interfaces/ConduitControllerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title ConduitControllerInterface\\n * @author 0age\\n * @notice ConduitControllerInterface contains all external function interfaces,\\n *         structs, events, and errors for the conduit controller.\\n */\\ninterface ConduitControllerInterface {\\n    /**\\n     * @dev Track the conduit key, current owner, new potential owner, and open\\n     *      channels for each deployed conduit.\\n     */\\n    struct ConduitProperties {\\n        bytes32 key;\\n        address owner;\\n        address potentialOwner;\\n        address[] channels;\\n        mapping(address => uint256) channelIndexesPlusOne;\\n    }\\n\\n    /**\\n     * @dev Emit an event whenever a new conduit is created.\\n     *\\n     * @param conduit    The newly created conduit.\\n     * @param conduitKey The conduit key used to create the new conduit.\\n     */\\n    event NewConduit(address conduit, bytes32 conduitKey);\\n\\n    /**\\n     * @dev Emit an event whenever conduit ownership is transferred.\\n     *\\n     * @param conduit       The conduit for which ownership has been\\n     *                      transferred.\\n     * @param previousOwner The previous owner of the conduit.\\n     * @param newOwner      The new owner of the conduit.\\n     */\\n    event OwnershipTransferred(\\n        address indexed conduit,\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Emit an event whenever a conduit owner registers a new potential\\n     *      owner for that conduit.\\n     *\\n     * @param newPotentialOwner The new potential owner of the conduit.\\n     */\\n    event PotentialOwnerUpdated(address indexed newPotentialOwner);\\n\\n    /**\\n     * @dev Revert with an error when attempting to create a new conduit using a\\n     *      conduit key where the first twenty bytes of the key do not match the\\n     *      address of the caller.\\n     */\\n    error InvalidCreator();\\n\\n    /**\\n     * @dev Revert with an error when attempting to create a new conduit when no\\n     *      initial owner address is supplied.\\n     */\\n    error InvalidInitialOwner();\\n\\n    /**\\n     * @dev Revert with an error when attempting to set a new potential owner\\n     *      that is already set.\\n     */\\n    error NewPotentialOwnerAlreadySet(\\n        address conduit,\\n        address newPotentialOwner\\n    );\\n\\n    /**\\n     * @dev Revert with an error when attempting to cancel ownership transfer\\n     *      when no new potential owner is currently set.\\n     */\\n    error NoPotentialOwnerCurrentlySet(address conduit);\\n\\n    /**\\n     * @dev Revert with an error when attempting to interact with a conduit that\\n     *      does not yet exist.\\n     */\\n    error NoConduit();\\n\\n    /**\\n     * @dev Revert with an error when attempting to create a conduit that\\n     *      already exists.\\n     */\\n    error ConduitAlreadyExists(address conduit);\\n\\n    /**\\n     * @dev Revert with an error when attempting to update channels or transfer\\n     *      ownership of a conduit when the caller is not the owner of the\\n     *      conduit in question.\\n     */\\n    error CallerIsNotOwner(address conduit);\\n\\n    /**\\n     * @dev Revert with an error when attempting to register a new potential\\n     *      owner and supplying the null address.\\n     */\\n    error NewPotentialOwnerIsZeroAddress(address conduit);\\n\\n    /**\\n     * @dev Revert with an error when attempting to claim ownership of a conduit\\n     *      with a caller that is not the current potential owner for the\\n     *      conduit in question.\\n     */\\n    error CallerIsNotNewPotentialOwner(address conduit);\\n\\n    /**\\n     * @dev Revert with an error when attempting to retrieve a channel using an\\n     *      index that is out of range.\\n     */\\n    error ChannelOutOfRange(address conduit);\\n\\n    /**\\n     * @notice Deploy a new conduit using a supplied conduit key and assigning\\n     *         an initial owner for the deployed conduit. Note that the first\\n     *         twenty bytes of the supplied conduit key must match the caller\\n     *         and that a new conduit cannot be created if one has already been\\n     *         deployed using the same conduit key.\\n     *\\n     * @param conduitKey   The conduit key used to deploy the conduit. Note that\\n     *                     the first twenty bytes of the conduit key must match\\n     *                     the caller of this contract.\\n     * @param initialOwner The initial owner to set for the new conduit.\\n     *\\n     * @return conduit The address of the newly deployed conduit.\\n     */\\n    function createConduit(bytes32 conduitKey, address initialOwner)\\n        external\\n        returns (address conduit);\\n\\n    /**\\n     * @notice Open or close a channel on a given conduit, thereby allowing the\\n     *         specified account to execute transfers against that conduit.\\n     *         Extreme care must be taken when updating channels, as malicious\\n     *         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155\\n     *         tokens where the token holder has granted the conduit approval.\\n     *         Only the owner of the conduit in question may call this function.\\n     *\\n     * @param conduit The conduit for which to open or close the channel.\\n     * @param channel The channel to open or close on the conduit.\\n     * @param isOpen  A boolean indicating whether to open or close the channel.\\n     */\\n    function updateChannel(\\n        address conduit,\\n        address channel,\\n        bool isOpen\\n    ) external;\\n\\n    /**\\n     * @notice Initiate conduit ownership transfer by assigning a new potential\\n     *         owner for the given conduit. Once set, the new potential owner\\n     *         may call `acceptOwnership` to claim ownership of the conduit.\\n     *         Only the owner of the conduit in question may call this function.\\n     *\\n     * @param conduit The conduit for which to initiate ownership transfer.\\n     * @param newPotentialOwner The new potential owner of the conduit.\\n     */\\n    function transferOwnership(address conduit, address newPotentialOwner)\\n        external;\\n\\n    /**\\n     * @notice Clear the currently set potential owner, if any, from a conduit.\\n     *         Only the owner of the conduit in question may call this function.\\n     *\\n     * @param conduit The conduit for which to cancel ownership transfer.\\n     */\\n    function cancelOwnershipTransfer(address conduit) external;\\n\\n    /**\\n     * @notice Accept ownership of a supplied conduit. Only accounts that the\\n     *         current owner has set as the new potential owner may call this\\n     *         function.\\n     *\\n     * @param conduit The conduit for which to accept ownership.\\n     */\\n    function acceptOwnership(address conduit) external;\\n\\n    /**\\n     * @notice Retrieve the current owner of a deployed conduit.\\n     *\\n     * @param conduit The conduit for which to retrieve the associated owner.\\n     *\\n     * @return owner The owner of the supplied conduit.\\n     */\\n    function ownerOf(address conduit) external view returns (address owner);\\n\\n    /**\\n     * @notice Retrieve the conduit key for a deployed conduit via reverse\\n     *         lookup.\\n     *\\n     * @param conduit The conduit for which to retrieve the associated conduit\\n     *                key.\\n     *\\n     * @return conduitKey The conduit key used to deploy the supplied conduit.\\n     */\\n    function getKey(address conduit) external view returns (bytes32 conduitKey);\\n\\n    /**\\n     * @notice Derive the conduit associated with a given conduit key and\\n     *         determine whether that conduit exists (i.e. whether it has been\\n     *         deployed).\\n     *\\n     * @param conduitKey The conduit key used to derive the conduit.\\n     *\\n     * @return conduit The derived address of the conduit.\\n     * @return exists  A boolean indicating whether the derived conduit has been\\n     *                 deployed or not.\\n     */\\n    function getConduit(bytes32 conduitKey)\\n        external\\n        view\\n        returns (address conduit, bool exists);\\n\\n    /**\\n     * @notice Retrieve the potential owner, if any, for a given conduit. The\\n     *         current owner may set a new potential owner via\\n     *         `transferOwnership` and that owner may then accept ownership of\\n     *         the conduit in question via `acceptOwnership`.\\n     *\\n     * @param conduit The conduit for which to retrieve the potential owner.\\n     *\\n     * @return potentialOwner The potential owner, if any, for the conduit.\\n     */\\n    function getPotentialOwner(address conduit)\\n        external\\n        view\\n        returns (address potentialOwner);\\n\\n    /**\\n     * @notice Retrieve the status (either open or closed) of a given channel on\\n     *         a conduit.\\n     *\\n     * @param conduit The conduit for which to retrieve the channel status.\\n     * @param channel The channel for which to retrieve the status.\\n     *\\n     * @return isOpen The status of the channel on the given conduit.\\n     */\\n    function getChannelStatus(address conduit, address channel)\\n        external\\n        view\\n        returns (bool isOpen);\\n\\n    /**\\n     * @notice Retrieve the total number of open channels for a given conduit.\\n     *\\n     * @param conduit The conduit for which to retrieve the total channel count.\\n     *\\n     * @return totalChannels The total number of open channels for the conduit.\\n     */\\n    function getTotalChannels(address conduit)\\n        external\\n        view\\n        returns (uint256 totalChannels);\\n\\n    /**\\n     * @notice Retrieve an open channel at a specific index for a given conduit.\\n     *         Note that the index of a channel can change as a result of other\\n     *         channels being closed on the conduit.\\n     *\\n     * @param conduit      The conduit for which to retrieve the open channel.\\n     * @param channelIndex The index of the channel in question.\\n     *\\n     * @return channel The open channel, if any, at the specified channel index.\\n     */\\n    function getChannel(address conduit, uint256 channelIndex)\\n        external\\n        view\\n        returns (address channel);\\n\\n    /**\\n     * @notice Retrieve all open channels for a given conduit. Note that calling\\n     *         this function for a conduit with many channels will revert with\\n     *         an out-of-gas error.\\n     *\\n     * @param conduit The conduit for which to retrieve open channels.\\n     *\\n     * @return channels An array of open channels on the given conduit.\\n     */\\n    function getChannels(address conduit)\\n        external\\n        view\\n        returns (address[] memory channels);\\n\\n    /**\\n     * @dev Retrieve the conduit creation code and runtime code hashes.\\n     */\\n    function getConduitCodeHashes()\\n        external\\n        view\\n        returns (bytes32 creationCodeHash, bytes32 runtimeCodeHash);\\n}\\n\",\"keccak256\":\"0xb124e40645efdf5d92b48fd54eaeb0ba1d05fde62bf51e7684c1bc3bf5343388\",\"license\":\"MIT\"},\"seaport/contracts/interfaces/ConduitInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// prettier-ignore\\nimport {\\n    ConduitTransfer,\\n    ConduitBatch1155Transfer\\n} from \\\"../conduit/lib/ConduitStructs.sol\\\";\\n\\n/**\\n * @title ConduitInterface\\n * @author 0age\\n * @notice ConduitInterface contains all external function interfaces, events,\\n *         and errors for conduit contracts.\\n */\\ninterface ConduitInterface {\\n    /**\\n     * @dev Revert with an error when attempting to execute transfers using a\\n     *      caller that does not have an open channel.\\n     */\\n    error ChannelClosed(address channel);\\n\\n    /**\\n     * @dev Revert with an error when attempting to update a channel to the\\n     *      current status of that channel.\\n     */\\n    error ChannelStatusAlreadySet(address channel, bool isOpen);\\n\\n    /**\\n     * @dev Revert with an error when attempting to execute a transfer for an\\n     *      item that does not have an ERC20/721/1155 item type.\\n     */\\n    error InvalidItemType();\\n\\n    /**\\n     * @dev Revert with an error when attempting to update the status of a\\n     *      channel from a caller that is not the conduit controller.\\n     */\\n    error InvalidController();\\n\\n    /**\\n     * @dev Emit an event whenever a channel is opened or closed.\\n     *\\n     * @param channel The channel that has been updated.\\n     * @param open    A boolean indicating whether the conduit is open or not.\\n     */\\n    event ChannelUpdated(address indexed channel, bool open);\\n\\n    /**\\n     * @notice Execute a sequence of ERC20/721/1155 transfers. Only a caller\\n     *         with an open channel can call this function.\\n     *\\n     * @param transfers The ERC20/721/1155 transfers to perform.\\n     *\\n     * @return magicValue A magic value indicating that the transfers were\\n     *                    performed successfully.\\n     */\\n    function execute(ConduitTransfer[] calldata transfers)\\n        external\\n        returns (bytes4 magicValue);\\n\\n    /**\\n     * @notice Execute a sequence of batch 1155 transfers. Only a caller with an\\n     *         open channel can call this function.\\n     *\\n     * @param batch1155Transfers The 1155 batch transfers to perform.\\n     *\\n     * @return magicValue A magic value indicating that the transfers were\\n     *                    performed successfully.\\n     */\\n    function executeBatch1155(\\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\\n    ) external returns (bytes4 magicValue);\\n\\n    /**\\n     * @notice Execute a sequence of transfers, both single and batch 1155. Only\\n     *         a caller with an open channel can call this function.\\n     *\\n     * @param standardTransfers  The ERC20/721/1155 transfers to perform.\\n     * @param batch1155Transfers The 1155 batch transfers to perform.\\n     *\\n     * @return magicValue A magic value indicating that the transfers were\\n     *                    performed successfully.\\n     */\\n    function executeWithBatch1155(\\n        ConduitTransfer[] calldata standardTransfers,\\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\\n    ) external returns (bytes4 magicValue);\\n\\n    /**\\n     * @notice Open or close a given channel. Only callable by the controller.\\n     *\\n     * @param channel The channel to open or close.\\n     * @param isOpen  The status of the channel (either open or closed).\\n     */\\n    function updateChannel(address channel, bool isOpen) external;\\n}\\n\",\"keccak256\":\"0x3f3224e8455ccd73027671e44be8c5a2338c8cd4c0f1dca3fa0f15a44ef14f06\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101408060405234620001055760a08162002b8b80380380916200002482856200010a565b8339810103126200010557806200003f620000779262000144565b906200004e6020820162000144565b604082015190620000706080620000686060860162000144565b940162000144565b9362000159565b60405161299d9081620001ee8239608051816118e9015260a05181611918015260c05181818161072a0152818161106001528181611358015281816113d20152611501015260e051818181611b1901528181611e6201526120b5015261010051818181611b3a01528181611e8401526120d70152610120518181816103e201528181610d320152610f1a0152f35b600080fd5b601f909101601f19168101906001600160401b038211908210176200012e57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200010557565b60408051630a96ad3960e01b81529195939492936001600160a01b03939092908416918082600481865afa908115620001e357600091620001ae575b5060a052506080521660c05260e0526101005261012052565b82813d8311620001db575b620001c581836200010a565b81010312620001d8575051803862000195565b80fd5b503d620001b9565b513d6000823e3d90fdfe60806040526004361015610013575b600080fd5b60003560e01c8062c5a5651461011657806302232c1f1461010d5780630b7bc72914610104578063464d91cf146100fb5780636b2ace87146100f25780638974e275146100e95780639b223997146100e0578063ae408017146100d7578063b80e2d50146100ce578063c56420f7146100c5578063c7293668146100bc578063d75c7462146100b35763ead9ba13146100ab57600080fd5b61000e610fa5565b5061000e610ef4565b5061000e610dc9565b5061000e610cfe565b5061000e610bc8565b5061000e610a6e565b5061000e610935565b5061000e61074e565b5061000e6106fc565b5061000e6106d6565b5061000e610530565b5061000e6104ae565b5061000e610341565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161016357604052565b61016b61011f565b604052565b60c0810190811067ffffffffffffffff82111761016357604052565b6080810190811067ffffffffffffffff82111761016357604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761016357604052565b604051906101f682610170565b565b60209067ffffffffffffffff8111610212575b60051b0190565b61021a61011f565b61020b565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b81601f8201121561000e57803591610254836101f8565b9261026260405194856101a8565b808452602092838086019260051b82010192831161000e578301905b82821061028c575050505090565b838091833561029a8161021f565b81520191019061027e565b60843590600382101561000e57565b81601f8201121561000e5780359067ffffffffffffffff821161032a575b6040519261030860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601856101a8565b8284526020838301011161000e57816000926020809301838601378301015290565b61033261011f565b6102d2565b8015150361000e57565b5060e060031936011261000e5767ffffffffffffffff60043560443582811161000e5761037290369060040161023d565b6064359261037f8461021f565b6103876102a5565b60a43591821161000e576103a26103c29236906004016102b4565b9060c435936103b085610337565b84156104915730905b60243587611b11565b506103ca575b005b73ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016803b1561000e57600060405180927f2e1a7d4d00000000000000000000000000000000000000000000000000000000825281838161044889600483019190602083019252565b03925af18015610484575b61046b575b50821630146103c8575b6103c891611a74565b8061047861047e9261014f565b806106f1565b38610458565b61048c6110d9565b610453565b73ffffffffffffffffffffffffffffffffffffffff8716906103b9565b5060a060031936011261000e5760443567ffffffffffffffff811161000e576104db90369060040161023d565b606435906104e88261021f565b61050c608435916104f883610337565b82156105135730905b6024356004356120a5565b906103ca57005b73ffffffffffffffffffffffffffffffffffffffff841690610501565b503461000e57604060031936011261000e5760043561054e8161021f565b6024359073ffffffffffffffffffffffffffffffffffffffff80911690604051907f6352211e000000000000000000000000000000000000000000000000000000008252602082806105a887600483019190602083019252565b0381865afa918215610670575b600092610640575b501630146105c757005b803b1561000e576040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015233602482015260448101929092526000908290818381606481015b03925af18015610633575b61062657005b806104786103c89261014f565b61063b6110d9565b610620565b61066291925060203d8111610669575b61065a81836101a8565b810190611a5f565b90386105bd565b503d610650565b6106786110d9565b6105b5565b60a060031982011261000e576004356106958161021f565b916024356106a28161021f565b9160443591606435600381101561000e57916084359067ffffffffffffffff821161000e576106d3916004016102b4565b90565b503461000e576103c86106e83661067d565b9392909261114c565b600091031261000e57565b503461000e57600060031936011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760c060031936011261000e5760043561076c8161021f565b6024356107788161021f565b60443591606435906107886102a5565b60a43567ffffffffffffffff811161000e576107a89036906004016102b4565b906107b281611116565b8061087c57505073ffffffffffffffffffffffffffffffffffffffff16803b1561000e576040517ff242432a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9390931660248401526044830193909352606482015260a06084820152600260a48201527f307800000000000000000000000000000000000000000000000000000000000060c482015290600090829060e490829084905af180156106335761062657005b8061088d6001929794969397611116565b036108b0576108a8856020806103c89851830101910161113d565b9333906119b1565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f7472616e736665724552433131353546726f6d2f494e56414c49445f544f4b4560448201527f4e5f534f555243450000000000000000000000000000000000000000000000006064820152608490fd5b503461000e57604060031936011261000e576004356109538161021f565b6040517efdd58e0000000000000000000000000000000000000000000000000000000081523060048201526024803590820181905273ffffffffffffffffffffffffffffffffffffffff929092169190602081604481865afa908115610a61575b600091610a33575b50806109c457005b823b1561000e576040517ff242432a0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810192909252606482015260a06084820152600060a482018190529091829060c490829084905af180156106335761062657005b610a54915060203d8111610a5a575b610a4c81836101a8565b81019061113d565b386109bc565b503d610a42565b610a696110d9565b6109b4565b503461000e57610a7d3661067d565b90610a8a81959395611116565b80610b0f57505073ffffffffffffffffffffffffffffffffffffffff1691823b1561000e576040517f42842e0e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9092166024830152604482015290600090829081838160648101610615565b80610b206001929694959396611116565b03610b4357610b3b846020806103c89751830101910161113d565b923390611950565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f7472616e7366657245524337323146726f6d2f494e56414c49445f544f4b454e60448201527f5f534f55524345000000000000000000000000000000000000000000000000006064820152608490fd5b50608060031936011261000e5760243567ffffffffffffffff811161000e57610bf590369060040161023d565b60443590610c028261021f565b61050c60643591610c1283610337565b610c57610c3e610c3e610c248461161a565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529190602090839060249082905afa918215610cf1575b600092610cd1575b508315610cb45730915b600435906120a5565b73ffffffffffffffffffffffffffffffffffffffff851691610cab565b610cea91925060203d8111610a5a57610a4c81836101a8565b9038610ca1565b610cf96110d9565b610c99565b50604060031936011261000e57602435600435610d1a8261021f565b73ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016803b1561000e57600080916024604051809481937f2e1a7d4d0000000000000000000000000000000000000000000000000000000083528860048401525af18015610dbc575b610da9575b50309083160361046257005b80610478610db69261014f565b38610d9d565b610dc46110d9565b610d98565b5060208060031936011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610df88161021f565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291168282602481845afa918215610ee7575b600092610ec8575b5081610e4657005b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101929092528290829060449082906000905af18015610ebb575b610e9557005b816103c892903d10610eb4575b610eac81836101a8565b810190611128565b503d610ea2565b610ec36110d9565b610e8f565b610ee0919250833d8511610a5a57610a4c81836101a8565b9038610e3e565b610eef6110d9565b610e36565b5060006020600319360112610fa25773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001681813b15610fa257600491604051928380927fd0e30db00000000000000000000000000000000000000000000000000000000082528235905af18015610f95575b610f86575b50604051f35b610f8f9061014f565b38610f80565b610f9d6110d9565b610f7b565b80fd5b503461000e5760a060031936011261000e576110446040600435610fc88161021f565b60243590610fd58261021f565b82517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152306024820152911660448083019190915235606480830191909152356084820152918290819060a4820190565b038160843573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156110b6575b61108f57005b6103c89060403d81116110af575b6110a781836101a8565b8101906110c3565b503d61109d565b6110be6110d9565b611089565b919082604091031261000e576020825192015190565b506040513d6000823e3d90fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003111561112057565b6101f66110e6565b9081602091031261000e57516106d381610337565b9081602091031261000e575190565b929390919361115a81611116565b806111f55750506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481019390935260209183916064918391600091165af180156111e8575b6111d1575b50565b6111ce9060203d8111610eb457610eac81836101a8565b6111f06110d9565b6111c9565b6112028195939295611116565b600181036112295750611221846020806101f69751830101910161113d565b923390611749565b80611235600292611116565b0361125857611250846020806101f697518301019101611128565b9233906112dd565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f7472616e73666572455243323046726f6d2f494e56414c49445f544f4b454e5f60448201527f534f5552434500000000000000000000000000000000000000000000000000006064820152608490fd5b9091926000946000146113b057604080517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152938316602485015293821660448401526064830152608482019390935291829060a49082906000907f0000000000000000000000000000000000000000000000000000000000000000165af180156113a3575b6113885750565b61139f9060403d81116110af576110a781836101a8565b5050565b6113ab6110d9565b611381565b809392919361148c575b5073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b1561000e576040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9485166004820152908416602482015291909216604482015260648101929092526000908290608490829084905af1801561147f575b6114725750565b806104786101f69261014f565b6114876110d9565b61146b565b6040517fda5139ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024810191909152600060448201529093906020818060648101038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa918215611557575b91611539575b5092386113ba565b611551915060203d8111610a5a57610a4c81836101a8565b38611531565b61155f6110d9565b61152b565b60409081519180830183811067ffffffffffffffff8211176115dd575b815260018352829160005b6020808210156115d5578351602092916115a582610170565b600082526000818301526000868301526000606083015260006080830152600060a083015282880101520161158c565b505091925050565b6115e561011f565b611581565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090805115611628570190565b6116306115ea565b0190565b604090805160011015611628570190565b602091815181101561165a575b60051b010190565b6116626115ea565b611652565b9081602091031261000e57517fffffffff000000000000000000000000000000000000000000000000000000008116810361000e5790565b60208082019080835283518092528060408094019401926000905b8382106116c957505050505090565b90919293948360c060019288518051600481101561173c575b825273ffffffffffffffffffffffffffffffffffffffff80858301511685840152808783015116878401526060908183015116908301526080808201519083015260a08091015190820152019601920190939291936116ba565b6117446110e6565b6116e2565b9061183e92916020946117e761177373ffffffffffffffffffffffffffffffffffffffff98611885565b946117ca61177f611564565b956117ad61178b6101e9565b60018152965b73ffffffffffffffffffffffffffffffffffffffff16878c0152565b73ffffffffffffffffffffffffffffffffffffffff166040860152565b73ffffffffffffffffffffffffffffffffffffffff166060840152565b6000608083015260a08201526117fc8261161a565b526118068161161a565b5060006040519586809581947f4ce34aa20000000000000000000000000000000000000000000000000000000083526004830161169f565b0393165af18015611878575b6118515750565b6111ce9060203d8111611871575b61186981836101a8565b810190611667565b503d61185f565b6118806110d9565b61184a565b73ffffffffffffffffffffffffffffffffffffffff9060405160208101917fff0000000000000000000000000000000000000000000000000000000000000083527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060601b16602183015260358201527f00000000000000000000000000000000000000000000000000000000000000006055820152605581526119498161018c565b5190201690565b9061183e929160209461199c61197a73ffffffffffffffffffffffffffffffffffffffff98611885565b946117ca611986611564565b956117ad6119926101e9565b6002815296611791565b6080820152600160a08201526117fc8261161a565b60209461183e94611a4c6119d973ffffffffffffffffffffffffffffffffffffffff99611885565b95611a2f6119e5611564565b96611a126119f16101e9565b600381529773ffffffffffffffffffffffffffffffffffffffff16888d0152565b73ffffffffffffffffffffffffffffffffffffffff166040870152565b73ffffffffffffffffffffffffffffffffffffffff166060850152565b608083015260a08201526117fc8261161a565b9081602091031261000e57516106d38161021f565b60008080809481945af115610fa25750565b15611a8d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5f6c65676163795377617045786163744f75742f4558434553534956455f414d60448201527f4f554e545f494e000000000000000000000000000000000000000000000000006064820152fd5b9295949193907f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b676002885110156123e6565b611b71875161244b565b9586519060018210611c71575b611b8d60001980930189611645565b52875160018110611c64575b01805b611c00575092611bfb926101f6979592611bf58896611bbe611bca9d9a61161a565b519c8d94851115611a86565b611bd6610c248a61161a565b92611be3610c248b61161a565b611bef610c248c611634565b9161230b565b9061114c565b611e5b565b80611c46611c35848b611c2e610c2486611c28610c24611c22611c5e9b611cc6565b86611645565b93611645565b9088612567565b90611c40848c611645565b51612874565b611c58611c5283611cc6565b8a611645565b52612866565b80611b9c565b611c6c611c7e565b611b99565b611c79611c7e565b611b7e565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001906000198114611cbe570190565b611630611c7e565b6000199060018110611cbe570190565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9060028110611cbe570190565b818110611d0f570390565b611d17611c7e565b0390565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611cbe570190565b6002907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8111611cbe570190565b81198111611cbe570190565b604051906000602083019280841067ffffffffffffffff851117611daf575b8360405281815292369037565b611db761011f565b611da2565b9273ffffffffffffffffffffffffffffffffffffffff91959495845260209283850152166040830152608060608301528351908160808401526000945b828610611e45575050601f817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09260a0959611611e38575b0116010190565b6000858286010152611e31565b85810182015184870160a0015294810194611df9565b92919260007f0000000000000000000000000000000000000000000000000000000000000000927f0000000000000000000000000000000000000000000000000000000000000000915b611eaf8251611cc6565b8110156120115780611ec5610c24899385611645565b611ed4610c24611c2284611d1b565b85611edf82846121ed565b5091868a611ef5611eef88611d1b565b8c611645565b519473ffffffffffffffffffffffffffffffffffffffff878116911603611ff7579282610c3e9282611f5e96610c3e968b60009a9d5b611f358651611cd6565b821015611feb5750610c24611f5695611f50611bef93611d49565b90611645565b965b8d61230b565b91611f67611d83565b92803b1561000e57611fc69560008094611fb0604051978896879586947f022c0d9f00000000000000000000000000000000000000000000000000000000865260048601611dbc565b03925af18015611fde575b611fcb575b50611cae565b611ea5565b80610478611fd89261014f565b38611fc0565b611fe66110d9565b611fbb565b94505050505096611f58565b9392610c3e92610c3e9282611f5e9697838b60009d611f2b565b50505050509050565b1561202157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5f6c6567616379537761704578616374496e2f4558434553534956455f414d4f60448201527f554e545f4f5554000000000000000000000000000000000000000000000000006064820152fd5b916101f692949391946121ac60207f0000000000000000000000000000000000000000000000000000000000000000927f0000000000000000000000000000000000000000000000000000000000000000936121526121068688858561249a565b9561212761211d6121178951611cc6565b89611645565b519c8d101561201a565b612139610c3e610c3e610c248b61161a565b92612146610c248a61161a565b611bef610c248b611634565b60006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af180156121e0575b6121c2575b50611e5b565b6121d99060203d8111610eb457610eac81836101a8565b50386121bc565b6121e86110d9565b6121b7565b909173ffffffffffffffffffffffffffffffffffffffff9182841683821681811461228757101561228257925b9183161561222457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152fd5b61221a565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152fd5b919261232e73ffffffffffffffffffffffffffffffffffffffff9460b5936121ed565b6040939193519060208201947fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009182809260601b16875260601b16603483015260288252606082019482861067ffffffffffffffff8711176123d9575b85604052825190209060808301967fff00000000000000000000000000000000000000000000000000000000000000885260601b16608183015260958201520152605581526119498161018c565b6123e161011f565b61238b565b156123ed57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152fd5b90612455826101f8565b61246260405191826101a8565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061249082946101f8565b0190602036910137565b909392916124ac6002825110156123e6565b6124b6815161244b565b9485511561253f575b602086015260005b600019825160018110612532575b0181101561252c5780612515612504866124f5610c246125279688611645565b611c2e610c2461211787611d1b565b9061250f848b611645565b5161277a565b61252161211783611d1b565b52611cae565b6124c7565b50505050565b61253a611c7e565b6124d5565b6125476115ea565b6124bf565b51906dffffffffffffffffffffffffffff8216820361000e57565b6060829161259b6004959661257c88866121ed565b509773ffffffffffffffffffffffffffffffffffffffff95869461230b565b16604051948580927f0902f1ac0000000000000000000000000000000000000000000000000000000082525afa92831561265c575b6000908194612604575b5081906dffffffffffffffffffffffffffff809116941694169116146000146126005791565b9091565b93506060843d8211612654575b8161261e606093836101a8565b81010312610fa25761262f8461254c565b90604061263e6020870161254c565b95015163ffffffff811603610fa25750816125da565b3d9150612611565b6126646110d9565b6125d0565b1561267057565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152fd5b6103e890806000190482118115151661270b570290565b612713611c7e565b0290565b6103e590806000190482118115151661270b570290565b806000190482118115151661270b570290565b811561274b570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b80156127e2576106d3926127c16127bb6127c693851515806127d9575b6127a090612669565b6103e590806000190482116001166127cc575b02928361272e565b936126f4565b611d77565b90612741565b6127d4611c7e565b6127b3565b50831515612797565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152fd5b600019908015611cbe570190565b80156128e3576106d3926128c16128bc6128a384866128c8971515806128da575b61289e90612669565b61272e565b936103e89385600019048511861515166128cd57611d04565b612717565b9102612741565b611d1b565b6128d5611c7e565b611d04565b50851515612895565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201527f55545055545f414d4f554e5400000000000000000000000000000000000000006064820152fdfea2646970667358221220a1bc2027da08c40895a13bae0e10a2aabcf7a1ec90338cd653854de0b6216a1464736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8062c5a5651461011657806302232c1f1461010d5780630b7bc72914610104578063464d91cf146100fb5780636b2ace87146100f25780638974e275146100e95780639b223997146100e0578063ae408017146100d7578063b80e2d50146100ce578063c56420f7146100c5578063c7293668146100bc578063d75c7462146100b35763ead9ba13146100ab57600080fd5b61000e610fa5565b5061000e610ef4565b5061000e610dc9565b5061000e610cfe565b5061000e610bc8565b5061000e610a6e565b5061000e610935565b5061000e61074e565b5061000e6106fc565b5061000e6106d6565b5061000e610530565b5061000e6104ae565b5061000e610341565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161016357604052565b61016b61011f565b604052565b60c0810190811067ffffffffffffffff82111761016357604052565b6080810190811067ffffffffffffffff82111761016357604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761016357604052565b604051906101f682610170565b565b60209067ffffffffffffffff8111610212575b60051b0190565b61021a61011f565b61020b565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b81601f8201121561000e57803591610254836101f8565b9261026260405194856101a8565b808452602092838086019260051b82010192831161000e578301905b82821061028c575050505090565b838091833561029a8161021f565b81520191019061027e565b60843590600382101561000e57565b81601f8201121561000e5780359067ffffffffffffffff821161032a575b6040519261030860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601856101a8565b8284526020838301011161000e57816000926020809301838601378301015290565b61033261011f565b6102d2565b8015150361000e57565b5060e060031936011261000e5767ffffffffffffffff60043560443582811161000e5761037290369060040161023d565b6064359261037f8461021f565b6103876102a5565b60a43591821161000e576103a26103c29236906004016102b4565b9060c435936103b085610337565b84156104915730905b60243587611b11565b506103ca575b005b73ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016803b1561000e57600060405180927f2e1a7d4d00000000000000000000000000000000000000000000000000000000825281838161044889600483019190602083019252565b03925af18015610484575b61046b575b50821630146103c8575b6103c891611a74565b8061047861047e9261014f565b806106f1565b38610458565b61048c6110d9565b610453565b73ffffffffffffffffffffffffffffffffffffffff8716906103b9565b5060a060031936011261000e5760443567ffffffffffffffff811161000e576104db90369060040161023d565b606435906104e88261021f565b61050c608435916104f883610337565b82156105135730905b6024356004356120a5565b906103ca57005b73ffffffffffffffffffffffffffffffffffffffff841690610501565b503461000e57604060031936011261000e5760043561054e8161021f565b6024359073ffffffffffffffffffffffffffffffffffffffff80911690604051907f6352211e000000000000000000000000000000000000000000000000000000008252602082806105a887600483019190602083019252565b0381865afa918215610670575b600092610640575b501630146105c757005b803b1561000e576040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015233602482015260448101929092526000908290818381606481015b03925af18015610633575b61062657005b806104786103c89261014f565b61063b6110d9565b610620565b61066291925060203d8111610669575b61065a81836101a8565b810190611a5f565b90386105bd565b503d610650565b6106786110d9565b6105b5565b60a060031982011261000e576004356106958161021f565b916024356106a28161021f565b9160443591606435600381101561000e57916084359067ffffffffffffffff821161000e576106d3916004016102b4565b90565b503461000e576103c86106e83661067d565b9392909261114c565b600091031261000e57565b503461000e57600060031936011261000e57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461000e5760c060031936011261000e5760043561076c8161021f565b6024356107788161021f565b60443591606435906107886102a5565b60a43567ffffffffffffffff811161000e576107a89036906004016102b4565b906107b281611116565b8061087c57505073ffffffffffffffffffffffffffffffffffffffff16803b1561000e576040517ff242432a00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9390931660248401526044830193909352606482015260a06084820152600260a48201527f307800000000000000000000000000000000000000000000000000000000000060c482015290600090829060e490829084905af180156106335761062657005b8061088d6001929794969397611116565b036108b0576108a8856020806103c89851830101910161113d565b9333906119b1565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f7472616e736665724552433131353546726f6d2f494e56414c49445f544f4b4560448201527f4e5f534f555243450000000000000000000000000000000000000000000000006064820152608490fd5b503461000e57604060031936011261000e576004356109538161021f565b6040517efdd58e0000000000000000000000000000000000000000000000000000000081523060048201526024803590820181905273ffffffffffffffffffffffffffffffffffffffff929092169190602081604481865afa908115610a61575b600091610a33575b50806109c457005b823b1561000e576040517ff242432a0000000000000000000000000000000000000000000000000000000081523060048201523360248201526044810192909252606482015260a06084820152600060a482018190529091829060c490829084905af180156106335761062657005b610a54915060203d8111610a5a575b610a4c81836101a8565b81019061113d565b386109bc565b503d610a42565b610a696110d9565b6109b4565b503461000e57610a7d3661067d565b90610a8a81959395611116565b80610b0f57505073ffffffffffffffffffffffffffffffffffffffff1691823b1561000e576040517f42842e0e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9092166024830152604482015290600090829081838160648101610615565b80610b206001929694959396611116565b03610b4357610b3b846020806103c89751830101910161113d565b923390611950565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f7472616e7366657245524337323146726f6d2f494e56414c49445f544f4b454e60448201527f5f534f55524345000000000000000000000000000000000000000000000000006064820152608490fd5b50608060031936011261000e5760243567ffffffffffffffff811161000e57610bf590369060040161023d565b60443590610c028261021f565b61050c60643591610c1283610337565b610c57610c3e610c3e610c248461161a565b5173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529190602090839060249082905afa918215610cf1575b600092610cd1575b508315610cb45730915b600435906120a5565b73ffffffffffffffffffffffffffffffffffffffff851691610cab565b610cea91925060203d8111610a5a57610a4c81836101a8565b9038610ca1565b610cf96110d9565b610c99565b50604060031936011261000e57602435600435610d1a8261021f565b73ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016803b1561000e57600080916024604051809481937f2e1a7d4d0000000000000000000000000000000000000000000000000000000083528860048401525af18015610dbc575b610da9575b50309083160361046257005b80610478610db69261014f565b38610d9d565b610dc46110d9565b610d98565b5060208060031936011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610df88161021f565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291168282602481845afa918215610ee7575b600092610ec8575b5081610e4657005b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101929092528290829060449082906000905af18015610ebb575b610e9557005b816103c892903d10610eb4575b610eac81836101a8565b810190611128565b503d610ea2565b610ec36110d9565b610e8f565b610ee0919250833d8511610a5a57610a4c81836101a8565b9038610e3e565b610eef6110d9565b610e36565b5060006020600319360112610fa25773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001681813b15610fa257600491604051928380927fd0e30db00000000000000000000000000000000000000000000000000000000082528235905af18015610f95575b610f86575b50604051f35b610f8f9061014f565b38610f80565b610f9d6110d9565b610f7b565b80fd5b503461000e5760a060031936011261000e576110446040600435610fc88161021f565b60243590610fd58261021f565b82517f02b9446c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152306024820152911660448083019190915235606480830191909152356084820152918290819060a4820190565b038160843573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156110b6575b61108f57005b6103c89060403d81116110af575b6110a781836101a8565b8101906110c3565b503d61109d565b6110be6110d9565b611089565b919082604091031261000e576020825192015190565b506040513d6000823e3d90fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003111561112057565b6101f66110e6565b9081602091031261000e57516106d381610337565b9081602091031261000e575190565b929390919361115a81611116565b806111f55750506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481019390935260209183916064918391600091165af180156111e8575b6111d1575b50565b6111ce9060203d8111610eb457610eac81836101a8565b6111f06110d9565b6111c9565b6112028195939295611116565b600181036112295750611221846020806101f69751830101910161113d565b923390611749565b80611235600292611116565b0361125857611250846020806101f697518301019101611128565b9233906112dd565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f7472616e73666572455243323046726f6d2f494e56414c49445f544f4b454e5f60448201527f534f5552434500000000000000000000000000000000000000000000000000006064820152608490fd5b9091926000946000146113b057604080517f97da6d3000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152938316602485015293821660448401526064830152608482019390935291829060a49082906000907f0000000000000000000000000000000000000000000000000000000000000000165af180156113a3575b6113885750565b61139f9060403d81116110af576110a781836101a8565b5050565b6113ab6110d9565b611381565b809392919361148c575b5073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690813b1561000e576040517ff18d03cc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9485166004820152908416602482015291909216604482015260648101929092526000908290608490829084905af1801561147f575b6114725750565b806104786101f69261014f565b6114876110d9565b61146b565b6040517fda5139ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024810191909152600060448201529093906020818060648101038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa918215611557575b91611539575b5092386113ba565b611551915060203d8111610a5a57610a4c81836101a8565b38611531565b61155f6110d9565b61152b565b60409081519180830183811067ffffffffffffffff8211176115dd575b815260018352829160005b6020808210156115d5578351602092916115a582610170565b600082526000818301526000868301526000606083015260006080830152600060a083015282880101520161158c565b505091925050565b6115e561011f565b611581565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090805115611628570190565b6116306115ea565b0190565b604090805160011015611628570190565b602091815181101561165a575b60051b010190565b6116626115ea565b611652565b9081602091031261000e57517fffffffff000000000000000000000000000000000000000000000000000000008116810361000e5790565b60208082019080835283518092528060408094019401926000905b8382106116c957505050505090565b90919293948360c060019288518051600481101561173c575b825273ffffffffffffffffffffffffffffffffffffffff80858301511685840152808783015116878401526060908183015116908301526080808201519083015260a08091015190820152019601920190939291936116ba565b6117446110e6565b6116e2565b9061183e92916020946117e761177373ffffffffffffffffffffffffffffffffffffffff98611885565b946117ca61177f611564565b956117ad61178b6101e9565b60018152965b73ffffffffffffffffffffffffffffffffffffffff16878c0152565b73ffffffffffffffffffffffffffffffffffffffff166040860152565b73ffffffffffffffffffffffffffffffffffffffff166060840152565b6000608083015260a08201526117fc8261161a565b526118068161161a565b5060006040519586809581947f4ce34aa20000000000000000000000000000000000000000000000000000000083526004830161169f565b0393165af18015611878575b6118515750565b6111ce9060203d8111611871575b61186981836101a8565b810190611667565b503d61185f565b6118806110d9565b61184a565b73ffffffffffffffffffffffffffffffffffffffff9060405160208101917fff0000000000000000000000000000000000000000000000000000000000000083527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060601b16602183015260358201527f00000000000000000000000000000000000000000000000000000000000000006055820152605581526119498161018c565b5190201690565b9061183e929160209461199c61197a73ffffffffffffffffffffffffffffffffffffffff98611885565b946117ca611986611564565b956117ad6119926101e9565b6002815296611791565b6080820152600160a08201526117fc8261161a565b60209461183e94611a4c6119d973ffffffffffffffffffffffffffffffffffffffff99611885565b95611a2f6119e5611564565b96611a126119f16101e9565b600381529773ffffffffffffffffffffffffffffffffffffffff16888d0152565b73ffffffffffffffffffffffffffffffffffffffff166040870152565b73ffffffffffffffffffffffffffffffffffffffff166060850152565b608083015260a08201526117fc8261161a565b9081602091031261000e57516106d38161021f565b60008080809481945af115610fa25750565b15611a8d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5f6c65676163795377617045786163744f75742f4558434553534956455f414d60448201527f4f554e545f494e000000000000000000000000000000000000000000000000006064820152fd5b9295949193907f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611b676002885110156123e6565b611b71875161244b565b9586519060018210611c71575b611b8d60001980930189611645565b52875160018110611c64575b01805b611c00575092611bfb926101f6979592611bf58896611bbe611bca9d9a61161a565b519c8d94851115611a86565b611bd6610c248a61161a565b92611be3610c248b61161a565b611bef610c248c611634565b9161230b565b9061114c565b611e5b565b80611c46611c35848b611c2e610c2486611c28610c24611c22611c5e9b611cc6565b86611645565b93611645565b9088612567565b90611c40848c611645565b51612874565b611c58611c5283611cc6565b8a611645565b52612866565b80611b9c565b611c6c611c7e565b611b99565b611c79611c7e565b611b7e565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001906000198114611cbe570190565b611630611c7e565b6000199060018110611cbe570190565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9060028110611cbe570190565b818110611d0f570390565b611d17611c7e565b0390565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611cbe570190565b6002907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd8111611cbe570190565b81198111611cbe570190565b604051906000602083019280841067ffffffffffffffff851117611daf575b8360405281815292369037565b611db761011f565b611da2565b9273ffffffffffffffffffffffffffffffffffffffff91959495845260209283850152166040830152608060608301528351908160808401526000945b828610611e45575050601f817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09260a0959611611e38575b0116010190565b6000858286010152611e31565b85810182015184870160a0015294810194611df9565b92919260007f0000000000000000000000000000000000000000000000000000000000000000927f0000000000000000000000000000000000000000000000000000000000000000915b611eaf8251611cc6565b8110156120115780611ec5610c24899385611645565b611ed4610c24611c2284611d1b565b85611edf82846121ed565b5091868a611ef5611eef88611d1b565b8c611645565b519473ffffffffffffffffffffffffffffffffffffffff878116911603611ff7579282610c3e9282611f5e96610c3e968b60009a9d5b611f358651611cd6565b821015611feb5750610c24611f5695611f50611bef93611d49565b90611645565b965b8d61230b565b91611f67611d83565b92803b1561000e57611fc69560008094611fb0604051978896879586947f022c0d9f00000000000000000000000000000000000000000000000000000000865260048601611dbc565b03925af18015611fde575b611fcb575b50611cae565b611ea5565b80610478611fd89261014f565b38611fc0565b611fe66110d9565b611fbb565b94505050505096611f58565b9392610c3e92610c3e9282611f5e9697838b60009d611f2b565b50505050509050565b1561202157565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f5f6c6567616379537761704578616374496e2f4558434553534956455f414d4f60448201527f554e545f4f5554000000000000000000000000000000000000000000000000006064820152fd5b916101f692949391946121ac60207f0000000000000000000000000000000000000000000000000000000000000000927f0000000000000000000000000000000000000000000000000000000000000000936121526121068688858561249a565b9561212761211d6121178951611cc6565b89611645565b519c8d101561201a565b612139610c3e610c3e610c248b61161a565b92612146610c248a61161a565b611bef610c248b611634565b60006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af180156121e0575b6121c2575b50611e5b565b6121d99060203d8111610eb457610eac81836101a8565b50386121bc565b6121e86110d9565b6121b7565b909173ffffffffffffffffffffffffffffffffffffffff9182841683821681811461228757101561228257925b9183161561222457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152fd5b61221a565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152fd5b919261232e73ffffffffffffffffffffffffffffffffffffffff9460b5936121ed565b6040939193519060208201947fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009182809260601b16875260601b16603483015260288252606082019482861067ffffffffffffffff8711176123d9575b85604052825190209060808301967fff00000000000000000000000000000000000000000000000000000000000000885260601b16608183015260958201520152605581526119498161018c565b6123e161011f565b61238b565b156123ed57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f5041544800006044820152fd5b90612455826101f8565b61246260405191826101a8565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061249082946101f8565b0190602036910137565b909392916124ac6002825110156123e6565b6124b6815161244b565b9485511561253f575b602086015260005b600019825160018110612532575b0181101561252c5780612515612504866124f5610c246125279688611645565b611c2e610c2461211787611d1b565b9061250f848b611645565b5161277a565b61252161211783611d1b565b52611cae565b6124c7565b50505050565b61253a611c7e565b6124d5565b6125476115ea565b6124bf565b51906dffffffffffffffffffffffffffff8216820361000e57565b6060829161259b6004959661257c88866121ed565b509773ffffffffffffffffffffffffffffffffffffffff95869461230b565b16604051948580927f0902f1ac0000000000000000000000000000000000000000000000000000000082525afa92831561265c575b6000908194612604575b5081906dffffffffffffffffffffffffffff809116941694169116146000146126005791565b9091565b93506060843d8211612654575b8161261e606093836101a8565b81010312610fa25761262f8461254c565b90604061263e6020870161254c565b95015163ffffffff811603610fa25750816125da565b3d9150612611565b6126646110d9565b6125d0565b1561267057565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152fd5b6103e890806000190482118115151661270b570290565b612713611c7e565b0290565b6103e590806000190482118115151661270b570290565b806000190482118115151661270b570290565b811561274b570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b80156127e2576106d3926127c16127bb6127c693851515806127d9575b6127a090612669565b6103e590806000190482116001166127cc575b02928361272e565b936126f4565b611d77565b90612741565b6127d4611c7e565b6127b3565b50831515612797565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152fd5b600019908015611cbe570190565b80156128e3576106d3926128c16128bc6128a384866128c8971515806128da575b61289e90612669565b61272e565b936103e89385600019048511861515166128cd57611d04565b612717565b9102612741565b611d1b565b6128d5611c7e565b611d04565b50851515612895565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201527f55545055545f414d4f554e5400000000000000000000000000000000000000006064820152fdfea2646970667358221220a1bc2027da08c40895a13bae0e10a2aabcf7a1ec90338cd653854de0b6216a1464736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositERC20ToBentoBox(address,address,uint256,uint256,uint256)": {
        "details": "Deposits ERC20 token from address(this) into the BentoBox.",
        "params": {
          "amount": "amount to be deposited",
          "share": "share to be deposited",
          "to": "receiver",
          "token": "token to deposit. Use token as address(0) when depositing native token",
          "value": "native token value to be deposited. Only use when token address is address(0)"
        }
      },
      "returnERC1155(address,uint256)": {
        "details": "Function to return any excess ERC1155 token from      address(this) to `msg.sender`.",
        "params": {
          "token": "The token to return to the caller.",
          "tokenId": "The token identifier of the asset."
        }
      },
      "returnERC20(address)": {
        "details": "Function to return any excess ERC20 tokens from address(this)      to `msg.sender`.",
        "params": {
          "token": "The token to return to the caller."
        }
      },
      "returnERC721(address,uint256)": {
        "details": "Function to return any left over ERC721 token from      address(this) to `msg.sender`.",
        "params": {
          "token": "The token to return to the caller.",
          "tokenId": "The token identifier of the asset."
        }
      },
      "swapExactIn(uint256,uint256,address[],address,bool)": {
        "details": "This function swaps an exact amount of tokens from address(this)      and sends a mimimum amount of output token to the specified recipient.",
        "params": {
          "amountIn": "The exact amount of input token to be spent.",
          "amountOutMin": "The minimum amount of output token to be received.",
          "path": "The swap path.",
          "to": "The recipient of output token.",
          "unwrapNative": "Flag to unwrap for native token if output token is WETH."
        }
      },
      "swapExactOut(uint256,uint256,address[],address,uint8,bytes,bool)": {
        "details": "This function swaps ERC20 tokens from msg.sender      for an exact amount of output tokens, sent      to the specified recipient.",
        "params": {
          "amountInMax": "The maximum amount of input to be spent.",
          "amountOut": "The exact amount of output token to receive.",
          "path": "The swap path.",
          "to": "The recipient to receive output token.",
          "tokenSource": "The token / approval source for input token.",
          "transferData": "Additional data required depending on `source`.",
          "unwrapNative": "Flag to unwrap for native token if output token is WETH."
        }
      },
      "swapMaxIn(uint256,address[],address,bool)": {
        "details": "This function performs the swaps as outlined in `path`. This contract's      entire balance of input token will be swapped for a minimum amount of      output token, sent to the specified recipient.",
        "params": {
          "amountOutMin": "The minimum amount of output token to be received.",
          "path": "The swap path.",
          "to": "The recipient of output token.",
          "unwrapNative": "Flag to unwrap for native token if output token is WETH."
        }
      },
      "transferERC1155From(address,address,uint256,uint256,uint8,bytes)": {
        "details": "Function to transfer an ERC1155 token from `msg.sender`      to a given recipient. Assets will be transferred from      a user's wallet with approvals being sourced from the      Shoyu contract or Seaport Conduit.",
        "params": {
          "amount": "The amount of the asset to transfer.",
          "data": "Additional encoded data required depending on `source`.",
          "source": "The NFT approval source.",
          "to": "The recipient of the transfer.",
          "token": "The ERC1155 token to transfer.",
          "tokenId": "The tokenId of the asset to transfer."
        }
      },
      "transferERC20From(address,address,uint256,uint8,bytes)": {
        "details": "Function to transfer ERC20 tokens from `msg.sender`      to a given recipient. Assets can be transferred from      a user's bentobox or wallet. If funds are transferred      from a user's wallet, approvals can be sourced from the      Shoyu contract or Seaport Conduit.",
        "params": {
          "amount": "The amount to transfer.",
          "data": "Additional encoded data required depending on `source`.",
          "source": "The token / approval source.",
          "to": "The recipient of the transfer.",
          "token": "The ERC20 token to transfer."
        }
      },
      "transferERC721From(address,address,uint256,uint8,bytes)": {
        "details": "Function to transfer an ERC721 token from `msg.sender`      to a given recipient. Assets will be transferred from      a user's wallet with approvals being sourced from the      Shoyu contract or Seaport Conduit.",
        "params": {
          "data": "Additional encoded data required depending on `source`.",
          "source": "The NFT approval source.",
          "to": "The recipient of the transfer.",
          "token": "The ERC721 token to transfer.",
          "tokenId": "The tokenId of the asset to transfer."
        }
      },
      "unwrapNativeToken(uint256,address)": {
        "details": "This function unwraps WETH held by address(this)      and transfers ETH to the specified recipient.",
        "params": {
          "amount": "The amount of WETH to be unwrapped.",
          "to": "The ETH recipient."
        }
      },
      "wrapNativeToken(uint256)": {
        "details": "This function wraps ETH held by address(this).",
        "params": {
          "amount": "The amount of ETH to wrap"
        }
      }
    },
    "stateVariables": {
      "WETH": {
        "details": "The WETH address."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}