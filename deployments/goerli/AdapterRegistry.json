{
  "address": "0x29ADd59b3cC0E381e0a2c816adE0f5087674778a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "adapterAddress",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "adapterAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapterAddress",
          "type": "address"
        }
      ],
      "name": "addAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "adapterAddress",
          "type": "address"
        }
      ],
      "name": "setAdapterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "setAdapterStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x720f7b5826ade4d982b0638a9cd126aa83643f5e462fcbfc0d4693a40505415c",
  "receipt": {
    "to": null,
    "from": "0x745E3182275791241eb92036a4A767664c456343",
    "contractAddress": "0x29ADd59b3cC0E381e0a2c816adE0f5087674778a",
    "transactionIndex": 43,
    "gasUsed": "602450",
    "logsBloom": "0x
    "blockHash": "0x1779c536c6973d3f786bd8004c04ad76428e0f1c7be86984b8ebe955cd5102a0",
    "transactionHash": "0x720f7b5826ade4d982b0638a9cd126aa83643f5e462fcbfc0d4693a40505415c",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 7594388,
        "transactionHash": "0x720f7b5826ade4d982b0638a9cd126aa83643f5e462fcbfc0d4693a40505415c",
        "address": "0x29ADd59b3cC0E381e0a2c816adE0f5087674778a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000745e3182275791241eb92036a4a767664c456343"
        ],
        "data": "0x",
        "logIndex": 101,
        "blockHash": "0x1779c536c6973d3f786bd8004c04ad76428e0f1c7be86984b8ebe955cd5102a0"
      }
    ],
    "blockNumber": 7594388,
    "cumulativeGasUsed": "10002615",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2,
    [
      "0x6F19C2e253A15a14090E37592f6BEDe14CBCDbe2",
      "0x23d420D8e5cbDE678280Cfb84319404F5847B6cb"
    ]
  ],
  "numDeployments": 5,
  "solcInputHash": "ce961eb7631a6ee9b0f07f4cc0f96052",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"adapterAddress\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"adapterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapterAddress\",\"type\":\"address\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adapterAddress\",\"type\":\"address\"}],\"name\":\"setAdapterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setAdapterStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdapter(address)\":{\"details\":\"This function allows the contract owner to add a new      adapter to the registry.\",\"params\":{\"adapterAddress\":\"The address of the new adapter.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAdapterAddress(uint256,address)\":{\"details\":\"This function allows the contract owner to set an address      for the specified adapter id.\",\"params\":{\"adapterAddress\":\"The new adapter address.\",\"id\":\"The id of the adapter to change.\"}},\"setAdapterStatus(uint256,bool)\":{\"details\":\"This function allows the contract owner to the update the      status of a given adapter id.\",\"params\":{\"id\":\"The id of the adapter to update.\",\"isActive\":\"The new active flag of given adapter.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/shoyu/lib/AdapterRegistry.sol\":\"AdapterRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":19066},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/shoyu/lib/AdapterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Adapter } from \\\"./LibShoyu.sol\\\";\\n\\ncontract AdapterRegistry is Ownable {\\n    Adapter[] public adapters;\\n\\n    constructor(\\n        uint256 length,\\n        address[] memory adapterAddress\\n    ) {\\n        for (uint256 i; i < length; ++i) {\\n            adapters.push(Adapter(adapterAddress[i], true));\\n        }\\n    }\\n\\n    /// @dev This function allows the contract owner to set an address\\n    ///      for the specified adapter id.\\n    /// @param id               The id of the adapter to change.\\n    /// @param adapterAddress   The new adapter address.\\n    function setAdapterAddress(\\n        uint256 id,\\n        address adapterAddress\\n    ) external onlyOwner {\\n        Adapter storage adapter = adapters[id];\\n        adapter.adapterAddress = adapterAddress; \\n    }\\n\\n    /// @dev This function allows the contract owner to the update the\\n    ///      status of a given adapter id.\\n    /// @param id           The id of the adapter to update.\\n    /// @param isActive     The new active flag of given adapter.\\n    function setAdapterStatus(\\n        uint256 id,\\n        bool isActive\\n    ) external onlyOwner {\\n        Adapter storage adapter = adapters[id];\\n        adapter.isActive = isActive;\\n    }\\n\\n    /// @dev This function allows the contract owner to add a new\\n    ///      adapter to the registry.\\n    /// @param adapterAddress   The address of the new adapter.\\n    function addAdapter(\\n        address adapterAddress\\n    ) external onlyOwner {\\n        adapters.push(Adapter(adapterAddress, true));\\n    }\\n}\",\"keccak256\":\"0x80d4c1206a0a5ca87fbb06983276546546bed5db9cc77ab7fcb1dbabe0b98e73\",\"license\":\"MIT\"},\"contracts/shoyu/lib/LibShoyu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.13;\\n\\nenum TokenSource {\\n    WALLET,\\n    CONDUIT\\n}\\n\\nstruct Adapter {\\n    address adapterAddress;\\n    bool isActive;\\n}\",\"keccak256\":\"0x62f8213d43b5a3b6ee253dc3ce89a4074b5cdbcaa60b31604cc923f20524b600\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234620000cd5762000ae7803803806200001d8162000128565b928339810190604081830312620000cd5780516020928383015160018060401b0393848211620000cd570181601f82011215620000cd578051938411620000d2575b8360051b9085806200007381850162000128565b809781520192820101928311620000cd578501905b828210620000ac576200009c8585620001e5565b6040516108219081620002c68239f35b81516001600160a01b0381168103620000cd57815290850190850162000088565b600080fd5b620000dc620000e2565b6200005f565b50634e487b7160e01b600052604160045260246000fd5b60408051919082016001600160401b038111838210176200011957604052565b62000123620000e2565b604052565b6040519190601f01601f191682016001600160401b038111838210176200011957604052565b50634e487b7160e01b600052603260045260246000fd5b60015468010000000000000000811015620001d5575b6001810180600155811015620001c5575b60016000526020600020019060018060a01b03815116825491602060ff60a01b910151151560a01b169160018060a81b03191617179055565b620001cf6200014e565b6200018c565b620001df620000e2565b6200017b565b60008054336001600160a01b0319821681178355604051939492936001600160a01b03928316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908690a3825b84811062000242575050505050565b8251811015620002b5575b6200028e60206200028884828560051b8801015116916200028062000271620000f9565b6001600160a01b039094168452565b820160019052565b62000165565b6000198114620002a15760010162000233565b634e487b7160e01b84526011600452602484fd5b620002bf6200014e565b6200024d56fe60806040526004361015610013575b600080fd5b6000803560e01c9081634d7851ea146100a2575080634ef501ac1461009957806360d54d4114610090578063715018a6146100875780638da5cb5b1461007e578063f2fde38b146100755763fc57db501461006d57600080fd5b61000e61066f565b5061000e610534565b5061000e6104e1565b5061000e610440565b5061000e6102b8565b5061000e610225565b346101675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610167576101556004356100df61016a565b906100e861073c565b60015481101561015a575b7fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b604051f35b6101626101b0565b6100f3565b80fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600154811015610218575b60016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b6102206101b0565b6101eb565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043560015481101561000e5760409060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015460ff82519173ffffffffffffffffffffffffffffffffffffffff8116835260a01c1615156020820152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576102f061018d565b6102f861073c565b6040516040810181811067ffffffffffffffff821117610433575b60405273ffffffffffffffffffffffffffffffffffffffff8092168152602081016001815261035c60015468010000000000000000811015610426575b600181016001556101e0565b9290926103f7576103f5936103ae915116839073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b5181547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690151560a01b74ff000000000000000000000000000000000000000016179055565b005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b61042e6107bb565b610350565b61043b6107bb565b610313565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101675761047961073c565b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000811682558173ffffffffffffffffffffffffffffffffffffffff60405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761056c61018d565b61057461073c565b73ffffffffffffffffffffffffffffffffffffffff8091169081156105eb57600091825491817fffffffffffffffffffffffff0000000000000000000000000000000000000000841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435602435801515810361000e576103f5916106ba61073c565b60015481101561072f575b7fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b169116179055565b6107376101b0565b6106c5565b73ffffffffffffffffffffffffffffffffffffffff60005416330361075d57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220bfa6e858016461001d4e889e42d55ba9e2f130e83d4b68c94d336d9b539a20a564736f6c634300080e0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c9081634d7851ea146100a2575080634ef501ac1461009957806360d54d4114610090578063715018a6146100875780638da5cb5b1461007e578063f2fde38b146100755763fc57db501461006d57600080fd5b61000e61066f565b5061000e610534565b5061000e6104e1565b5061000e610440565b5061000e6102b8565b5061000e610225565b346101675760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610167576101556004356100df61016a565b906100e861073c565b60015481101561015a575b7fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b604051f35b6101626101b0565b6100f3565b80fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600154811015610218575b60016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b6102206101b0565b6101eb565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043560015481101561000e5760409060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015460ff82519173ffffffffffffffffffffffffffffffffffffffff8116835260a01c1615156020820152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576102f061018d565b6102f861073c565b6040516040810181811067ffffffffffffffff821117610433575b60405273ffffffffffffffffffffffffffffffffffffffff8092168152602081016001815261035c60015468010000000000000000811015610426575b600181016001556101e0565b9290926103f7576103f5936103ae915116839073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b5181547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690151560a01b74ff000000000000000000000000000000000000000016179055565b005b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b61042e6107bb565b610350565b61043b6107bb565b610313565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101675761047961073c565b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000811682558173ffffffffffffffffffffffffffffffffffffffff60405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761056c61018d565b61057461073c565b73ffffffffffffffffffffffffffffffffffffffff8091169081156105eb57600091825491817fffffffffffffffffffffffff0000000000000000000000000000000000000000841617845560405192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435602435801515810361000e576103f5916106ba61073c565b60015481101561072f575b7fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601907fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b169116179055565b6107376101b0565b6106c5565b73ffffffffffffffffffffffffffffffffffffffff60005416330361075d57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220bfa6e858016461001d4e889e42d55ba9e2f130e83d4b68c94d336d9b539a20a564736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAdapter(address)": {
        "details": "This function allows the contract owner to add a new      adapter to the registry.",
        "params": {
          "adapterAddress": "The address of the new adapter."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAdapterAddress(uint256,address)": {
        "details": "This function allows the contract owner to set an address      for the specified adapter id.",
        "params": {
          "adapterAddress": "The new adapter address.",
          "id": "The id of the adapter to change."
        }
      },
      "setAdapterStatus(uint256,bool)": {
        "details": "This function allows the contract owner to the update the      status of a given adapter id.",
        "params": {
          "id": "The id of the adapter to update.",
          "isActive": "The new active flag of given adapter."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/shoyu/lib/AdapterRegistry.sol:AdapterRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5601,
        "contract": "contracts/shoyu/lib/AdapterRegistry.sol:AdapterRegistry",
        "label": "adapters",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(Adapter)5709_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Adapter)5709_storage)dyn_storage": {
        "base": "t_struct(Adapter)5709_storage",
        "encoding": "dynamic_array",
        "label": "struct Adapter[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_struct(Adapter)5709_storage": {
        "encoding": "inplace",
        "label": "struct Adapter",
        "members": [
          {
            "astId": 5706,
            "contract": "contracts/shoyu/lib/AdapterRegistry.sol:AdapterRegistry",
            "label": "adapterAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5708,
            "contract": "contracts/shoyu/lib/AdapterRegistry.sol:AdapterRegistry",
            "label": "isActive",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      }
    }
  }
}